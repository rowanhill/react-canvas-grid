{"version":3,"sources":["../../dist/index.js","../../dist/cursorState.js","../../dist/gridGeometry.js","../../dist/scrollbarGeometry.js","../../dist/GridCanvas.js","../../dist/types.js","../../dist/eventHandlers/scrollingTimer.js","../../dist/eventHandlers/scrolling.js","../../dist/eventHandlers/selection.js","../../dist/commonCanvasRenderer.js","../../dist/highlightCanvasRenderer.js","../../dist/ReactCanvasGrid.js","../../dist/eventHandlers/gridMouseEvents.js","../../dist/eventHandlers/frozenCellMouseEvents.js","../../dist/utils.js","../../dist/eventHandlers/mouseEvents.js","../../dist/eventHandlers/scrollbarMouseEvents.js","../../dist/FrozenCanvas.js","../../dist/FrozenColsCanvas.js","../../dist/gridCanvasRenderer.js","../../dist/FrozenCornerCanvas.js","../../dist/FrozenRowsCanvas.js","../../dist/gridState.js","../../dist/HighlightCanvas.js","../../dist/InlineEditor.js","../../dist/MainCanvas.js","components/FixedSizeHolder.tsx","components/PaddedPage.tsx","data/dataAndColumns.ts","examples/CustomBackground.tsx","examples/CustomText.tsx","components/ControlsForm.tsx","examples/DynamicData.tsx","examples/Editable.tsx","components/EventLog.tsx","examples/EditEvents.tsx","examples/Everything.tsx","examples/FocusColumn.tsx","examples/KeyboardEvents.tsx","examples/SelectionEvents.tsx","examples/exampleMeta.tsx","examples/SmallGrid.tsx","examples/Simple.tsx","examples/FrozenCells.tsx","examples/Index.tsx","App.tsx","index.tsx"],"names":["Object","defineProperty","exports","value","ReactCanvasGrid_1","__webpack_require__","ReactCanvasGrid","types_1","getCellText","cellHasTextFunction","cellIsEditable","__assign","this","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","hasSelectionRowState","cursorState","selection","frozenStartCell","type","hasSelectionColumnState","startDrag","gridCoords","editCursorCell","selectedRange","topLeft","bottomRight","selectionStartCell","updateDrag","x","Math","min","y","max","startRange","fromCoords","toCoords","frozenStart","hasSelectionState","hasSelectionCellState","hasSelectionFrozenState","createDefault","startRangeCorner","startRangeRow","rowIndex","startRangeColumn","colIndex","updateRangeRow","updateRangeColumn","isSelectRangeDifferent","oldRange","newRange","scrollbarGeometry_1","GridGeometry","calculateColumnBoundaries","columns","borderWidth","curLeft","map","col","boundary","left","right","width","calculateGridSize","data","columnBoundaries","rowHeight","numRows","height","calculateGridPlusGutterSize","gridSize","rootSize","barWidth","barMarginToEdge","calculateCanvasSize","gridPlusGutterSize","calculateFrozenRowsHeight","frozenRows","calculateFrozenColsWidth","frozenCols","rightmostColIndex","calculateGridCellCoordsFromGridState","event","rootRef","gridState","calculateGridCellCoords","gridOffset","maxRow","root","Error","gridPixelToGridCell","windowPixelToGridPixel","clientX","clientY","calculateCellBounds","cellLeft","top","bottom","calculateGridOffsetFromFraction","fraction","gridLength","canvasLength","floor","truncateGridOffset","oldOffset","canvasSize","maxX","maxY","quantiseGridOffset","offset","dpr","calculateGridOffsetForFocusedColumn","frozenColsWidth","focusedColIndex","verticalColumnGutter","gutterWidth","focusedBoundaries","viewLeft","viewRight","calculateVisibleRect","isWindowPixelWithinComponent","rootClientRect","getBoundingClientRect","calculateComponentPixel","windowPixelToComponentPixel","_a","barCapMargin","minBarLength","calculateLength","frozenLength","availableLength","contentRatio","round","calculateExtent","barLength","scrollFraction","scrollableCanvasLength","start","end","calculateTransversePosition","canvasTransverse","getHorizontalScrollbarLength","getVerticalScrollbarLength","frozenRowsHeight","getHorizontalScrollbarExtent","horizontalBarLength","getVerticalScrollbarExtent","verticalBarLength","getHorizontalScrollbarPos","extent","transverse","getVerticalScrollbarPos","getVerticalGutterBounds","getHorizontalGutterBounds","calculateFractionFromStartPos","getHitScrollBar","coord","horizontalPosition","verticalPosition","halfBarHeight","hTop","hBottom","hExtent","vLeft","vRight","vExtent","__extends","_extendStatics","d","b","setPrototypeOf","__proto__","Array","__","constructor","create","__importStar","mod","__esModule","result","k","instigator_1","React","gridCanvasRenderer_1","GridCanvas","_super","_this","canvasRef","createRef","renderer","renderCallback","render","createElement","ref","props","style","position","componentDidMount","current","basicProps","transformer","gridInnerSize","colBoundaries","GridCanvasRenderer","consumer","posProps","newBasicProps","newPosProps","updateProps","componentWillUnmount","deregister","Component","cell","getText","text","editor","scrolling_1","scrollBySelectionDragTimerId","clearScrollByDragTimer","clearInterval","startScrollBySelectionDragIfNeeded","componentPixelCoord","updateSelection","options","deltaX","suppressX","deltaY","suppressY","setInterval","updateOffsetByDelta","utils_1","newX","numberBetween","newY","gridOffsetRaw","cursorState_1","startOrUpdateSelection","shiftKey","startSelection","selectOrUpdateRow","updateSelectionRow","selectRow","selectOrUpdateCol","updateSelectionCol","selectCol","newCursorState","startSelectionWithCursorState","selectAll","onSelectionChangeStart","oldCursorState","truncatedCoords","updateCursorStateIfDifferent","onSelectionChangeUpdate","endSelection","onSelectionChangeEnd","currentCursorState","borderColour","CommonCanvasRenderer","canvas","alpha","queuedRender","setCanvas","context","getContext","drawCellBackgroundDefault","cellBounds","fillStyle","fillRect","drawCellTextDefault","textBaseline","verticalCentre","fillText","drawScaled","draw","window","requestAnimationFrame","scale","drawCell","metadata","renderBackground","renderText","commonCanvasRenderer_1","ScrollGeometry","defaultPosProps","visibleRect","defaultScrollbarProps","horizontalScrollbarPos","verticalScrollbarPos","hoveredScrollbar","defaultScrollbarStyle","hoveredScrollbarStyle","HighlightCanvasRenderer","scrollProps","selectionProps","clearRect","translate","lineCap","strokeStyle","lineWidth","rect","gridCellCoordToGridPixelCoord","strokeRect","tl","br","isSelectionMoreThanOneCell","vBounds","verticalGutterBounds","hBounds","horizontalGutterBounds","beginPath","moveTo","lineTo","stroke","scrollPos","selectProps","shouldSelectionClear","prev","next","gridMouseEvents_1","scrollbarMouseEvents_1","FrozenCanvas_1","gridGeometry_1","gridState_1","HighlightCanvas_1","highlightCanvasRenderer_1","InlineEditor_1","MainCanvas_1","onWheel","e","scaleFactor","0","1","deltaMode","preventDefault","onMouseDown","mouseDownOnScrollbar","mouseDownOnGrid","state","editingCell","onMouseMove","mouseDragOnScrollbar","mouseDragOnGrid","mouseHoverOnScrollbar","onMouseUp","batch","mouseUpOnScrollbar","mouseUpOnGrid","onDoubleClick","cellCoords","startEditingCell","fieldName","setState","cancelEditingCell","focusRoot","stopEditingCell","newData","onCellDataChanged","focus","preventScroll","GridState","rootRect","addEventListener","componentDidUpdate","prevProps","onSelectionCleared","truncatedOffset","focusedOffset","removeEventListener","className","tabIndex","cssWidth","cssHeight","overflow","outline","MainCanvas","HighlightCanvas","InlineTextEditor","onSubmit","onCancel","FrozenCanvas","defaultProps","PureComponent","frozenCellMouseEvents_1","mouseEvents_1","scrollingTimer_1","selection_1","isLeftButton","leftClickOnFrozenCell","leftClickDragOnFrozenCell","recalculateAndUpdateSelection","clickInFrozenCols","clickInFrozenRows","num","buttons","ScrollbarGeometry","draggedScrollbar","hitScrollbar","bar","origScrollbarStart","origClick","values","frozenLen","canvasLen","gridLen","barLen","horizontalScrollbarLength","clickCoord","verticalScrollbarLength","dragDistance","desiredStart","desiredFraction","newOffset","FrozenColsCanvas_1","FrozenCornerCanvas_1","FrozenRowsCanvas_1","Fragment","FrozenCornerCanvas","FrozenRowsCanvas","FrozenColsCanvas","GridCanvas_1","colsVisibleRect","scrollGutterHeight","colsPosProps","__importDefault","default","shallow_equals_1","prevDraw","xDiff","yDiff","shiftExistingCanvas","drawNewBorderBackground","drawWholeBorderBackground","translateToGridOffset","minRowIndex","maxRowIndex","ceil","_i","_b","cellRight","column","translateToOrigin","propsWidth","propsHeight","drawImage","top_1","cornerVisibleRect","cornerPosProps","rowsVisibleRect","scrollGutterWidth","rowsPosProps","activeSource","devicePixelRatio","horizontalScrollbarExtent","verticalScrollbarExtent","newScrollProps","newSelectionProps","defaultText","serialise","submit","inputValue","currentTarget","deserialise","boxSizing","border","autoFocus","defaultValue","onBlur","onKeyPress","key","onKeyUp","keyCode","mainVisibleRect","FixedSizeHolder","react","children","PaddedPage","createFakeDataAndColumns","numCols","dataGen","undefined","createFakeColumns","rows","createFakeData","cols","push","concat","_loop","row","_loop2","j","objectSpread","renderBackgroundLightGreen","renderTextRed","ControlsForm","InlineGroup","NumberInput","DynamicDataGrid","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","changeColsDebounceTimeout","changeRowsDebounceTimeout","changeNumRows","clearTimeout","target","valueAsNumber","setTimeout","changeNumRowsDebounced","_createFakeDataAndCol","changeNumCols","changeNumColsDebounced","_createFakeDataAndCol2","moveFirstColumnToEnd","toConsumableArray","slice","modifyTopLeftCell","firstColName","reset","getDefaultState","inherits","createClass","src_components_PaddedPage","ControlsForm_ControlsForm","ControlsForm_InlineGroup","ControlsForm_NumberInput","id","onChange","onClick","FixedSizeHolder_FixedSizeHolder","dist","_createFakeDataAndCol3","EditableDataGrid","_ref","_ref2","slicedToArray","a","match","parseInt","_ref3","_ref4","EventLog","_React$PureComponent","logRef","log","readOnly","scrollTop","scrollHeight","_","EditEventsGrid","eventLog","react_router_dom","to","EventLog_EventLog","numColsLarge","numColsSmall","labels","colour","highlights","renderHeaderBackground","renderCellBackground","highlight","bgColour","closePath","fill","getCustomCellText","shouldReverseText","split","reverse","join","serailiseCustomData","deserialiseCustomData","oldData","reversed","startsWith","createCols","colDefs","toString","createData","date","label","random","Everything","_Component","selectionChanged","isDragging","selectionFinished","selectionCleared","focusColumn","focusedCol","replaceDataLarge","replaceDataSmall","updateCell","onKeyPressed","lastKeyPress","_this2","colHeaders","cd","headerCell","react_default","JSON","stringify","backgroundColor","paddingLeft","paddingRight","FocusColumnGrid","toggleFrozenCols","freezeCols","htmlFor","KeyboardEventsGrid","exampleMeta","pathFragment","name","description","component","field-one","field-two","SelectionEventsGrid","range","appendToLog","update","eventType","paddedType","Index","meta","App","react_router","exact","path","activeClassName","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e89e7263.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ReactCanvasGrid_1 = require(\"./ReactCanvasGrid\");\n\nexports.ReactCanvasGrid = ReactCanvasGrid_1.ReactCanvasGrid;\n\nvar types_1 = require(\"./types\");\n\nexports.getCellText = types_1.getCellText;\nexports.cellHasTextFunction = types_1.cellHasTextFunction;\nexports.cellIsEditable = types_1.cellIsEditable;","\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction hasSelectionState(cursorState) {\n  return cursorState.selection !== null;\n}\n\nexports.hasSelectionState = hasSelectionState;\n\nfunction hasSelectionCellState(cursorState) {\n  return cursorState.selection !== null && cursorState.selection.frozenStartCell.type === 'none';\n}\n\nexports.hasSelectionCellState = hasSelectionCellState;\n\nfunction hasSelectionRowState(cursorState) {\n  return cursorState.selection !== null && cursorState.selection.frozenStartCell.type === 'row';\n}\n\nexports.hasSelectionRowState = hasSelectionRowState;\n\nfunction hasSelectionColumnState(cursorState) {\n  return cursorState.selection !== null && cursorState.selection.frozenStartCell.type === 'column';\n}\n\nexports.hasSelectionColumnState = hasSelectionColumnState;\n\nfunction hasSelectionFrozenState(cursorState) {\n  return hasSelectionRowState(cursorState) || hasSelectionColumnState(cursorState);\n}\n\nexports.hasSelectionFrozenState = hasSelectionFrozenState;\n\nfunction createDefault() {\n  return {\n    editCursorCell: null,\n    selection: null\n  };\n}\n\nexports.createDefault = createDefault;\n\nfunction startDrag(gridCoords, frozenStartCell) {\n  if (frozenStartCell === void 0) {\n    frozenStartCell = {\n      type: 'none'\n    };\n  }\n\n  var selectedRange = {\n    topLeft: gridCoords,\n    bottomRight: gridCoords\n  };\n  return {\n    editCursorCell: gridCoords,\n    selection: {\n      selectedRange: selectedRange,\n      selectionStartCell: gridCoords,\n      frozenStartCell: frozenStartCell\n    }\n  };\n}\n\nexports.startDrag = startDrag;\n\nfunction updateDrag(cursorState, gridCoords) {\n  var selectedRange = {\n    topLeft: {\n      x: Math.min(cursorState.selection.selectionStartCell.x, gridCoords.x),\n      y: Math.min(cursorState.selection.selectionStartCell.y, gridCoords.y)\n    },\n    bottomRight: {\n      x: Math.max(cursorState.selection.selectionStartCell.x, gridCoords.x),\n      y: Math.max(cursorState.selection.selectionStartCell.y, gridCoords.y)\n    }\n  };\n  return __assign({}, cursorState, {\n    selection: __assign({}, cursorState.selection, {\n      selectedRange: selectedRange\n    })\n  });\n}\n\nexports.updateDrag = updateDrag;\n\nfunction startRange(fromCoords, toCoords, frozenStart) {\n  var fromState = startDrag(fromCoords, frozenStart);\n  return updateDrag(fromState, toCoords);\n}\n\nfunction startRangeCorner(fromCoords, toCoords) {\n  return startRange(fromCoords, toCoords, {\n    type: 'corner'\n  });\n}\n\nexports.startRangeCorner = startRangeCorner;\n\nfunction startRangeRow(fromCoords, toCoords) {\n  return startRange(fromCoords, toCoords, {\n    type: 'row',\n    rowIndex: fromCoords.y\n  });\n}\n\nexports.startRangeRow = startRangeRow;\n\nfunction startRangeColumn(fromCoords, toCoords) {\n  return startRange(fromCoords, toCoords, {\n    type: 'column',\n    colIndex: fromCoords.x\n  });\n}\n\nexports.startRangeColumn = startRangeColumn;\n\nfunction updateRangeRow(cursorState, gridCoords) {\n  var selectedRange = {\n    topLeft: {\n      x: cursorState.selection.selectedRange.topLeft.x,\n      y: Math.min(cursorState.selection.frozenStartCell.rowIndex, gridCoords.y)\n    },\n    bottomRight: {\n      x: cursorState.selection.selectedRange.bottomRight.x,\n      y: Math.max(cursorState.selection.frozenStartCell.rowIndex, gridCoords.y)\n    }\n  };\n  return __assign({}, cursorState, {\n    selection: __assign({}, cursorState.selection, {\n      selectedRange: selectedRange\n    })\n  });\n}\n\nexports.updateRangeRow = updateRangeRow;\n\nfunction updateRangeColumn(cursorState, gridCoords) {\n  var selectedRange = {\n    topLeft: {\n      x: Math.min(cursorState.selection.frozenStartCell.colIndex, gridCoords.x),\n      y: cursorState.selection.selectedRange.topLeft.y\n    },\n    bottomRight: {\n      x: Math.max(cursorState.selection.frozenStartCell.colIndex, gridCoords.x),\n      y: Math.max(cursorState.selection.selectedRange.bottomRight.y)\n    }\n  };\n  return __assign({}, cursorState, {\n    selection: __assign({}, cursorState.selection, {\n      selectedRange: selectedRange\n    })\n  });\n}\n\nexports.updateRangeColumn = updateRangeColumn;\n\nfunction isSelectRangeDifferent(oldRange, newRange) {\n  return oldRange.bottomRight.x !== newRange.bottomRight.x || oldRange.bottomRight.y !== newRange.bottomRight.y || oldRange.topLeft.x !== newRange.topLeft.x || oldRange.topLeft.y !== newRange.topLeft.y;\n}\n\nexports.isSelectRangeDifferent = isSelectRangeDifferent;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar scrollbarGeometry_1 = require(\"./scrollbarGeometry\");\n\nvar GridGeometry =\n/** @class */\nfunction () {\n  function GridGeometry() {}\n  /**\n   * Calculate the boundaries of all columns in the grid, excluding borders. The 'left's are inclusive,\n   * the 'right's are exclusive.\n   */\n\n\n  GridGeometry.calculateColumnBoundaries = function (columns, borderWidth) {\n    var curLeft = 0;\n    return columns.map(function (col) {\n      // Left is 0-indexed and inclusive. Right is exclusive, so we can just add the width\n      var boundary = {\n        left: curLeft,\n        right: curLeft + col.width\n      }; // Add the border width on to skip it - the border is not within the range of any column\n\n      curLeft += col.width + borderWidth;\n      return boundary;\n    });\n  };\n  /**\n   * Calculate the total size of the grid, including borders, but excluding gutters\n   */\n\n\n  GridGeometry.calculateGridSize = function (data, columnBoundaries, rowHeight, borderWidth) {\n    var numRows = data.length;\n    var height = numRows * rowHeight + (numRows - 1) * borderWidth;\n    var width = columnBoundaries[columnBoundaries.length - 1].right;\n    return {\n      width: width,\n      height: height\n    };\n  };\n  /**\n   * Calculates the total size of the grid, including scrollbar gutters\n   */\n\n\n  GridGeometry.calculateGridPlusGutterSize = function (gridSize, rootSize) {\n    // If we don't know how big the root element is yet, assume no gutters\n    if (rootSize === null) {\n      return gridSize;\n    }\n\n    return {\n      width: gridSize.width + (gridSize.height > rootSize.height ? scrollbarGeometry_1.barWidth + scrollbarGeometry_1.barMarginToEdge * 2 : 0),\n      height: gridSize.height + (gridSize.width > rootSize.width ? scrollbarGeometry_1.barWidth + scrollbarGeometry_1.barMarginToEdge * 2 : 0)\n    };\n  };\n\n  GridGeometry.calculateCanvasSize = function (gridPlusGutterSize, rootSize) {\n    // First render is before componentDidMount, so before we have calculated the root element's size.\n    // In this case, we just render as 0x0. componentDidMount will then update state,\n    // and we'll re-render\n    if (rootSize === null) {\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n\n    return {\n      width: Math.min(rootSize.width, gridPlusGutterSize.width),\n      height: Math.min(rootSize.height, gridPlusGutterSize.height)\n    };\n  };\n  /*\n   * Calculate the height of all the frozen rows and their bottom borders\n   */\n\n\n  GridGeometry.calculateFrozenRowsHeight = function (rowHeight, borderWidth, frozenRows) {\n    return (rowHeight + borderWidth) * frozenRows;\n  };\n  /*\n   * Calculate the width of all the frozen rows and their right borders\n   */\n\n\n  GridGeometry.calculateFrozenColsWidth = function (columnBoundaries, frozenCols, borderWidth) {\n    var rightmostColIndex = frozenCols - 1;\n\n    if (rightmostColIndex < 0) {\n      return 0;\n    }\n\n    return columnBoundaries[rightmostColIndex].right + borderWidth;\n  };\n\n  GridGeometry.calculateGridCellCoordsFromGridState = function (event, rootRef, gridState) {\n    return GridGeometry.calculateGridCellCoords(event, gridState.columnBoundaries(), gridState.borderWidth(), gridState.rowHeight(), gridState.gridOffset(), gridState.data().length - 1, rootRef);\n  };\n  /**\n   * Calculate the column & row index (i.e. \"grid cell coordinates\") that contains a click. The click coordinates\n   * are given in the window/viewport's frame of reference.\n   */\n\n\n  GridGeometry.calculateGridCellCoords = function (event, columnBoundaries, borderWidth, rowHeight, gridOffset, maxRow, root) {\n    if (!root) {\n      throw new Error('Cannot convert mouse event coords to grid coords because rootRef is not set');\n    }\n\n    return GridGeometry.gridPixelToGridCell(GridGeometry.windowPixelToGridPixel({\n      x: event.clientX,\n      y: event.clientY\n    }, gridOffset, root), columnBoundaries, borderWidth, rowHeight, maxRow);\n  };\n\n  GridGeometry.calculateCellBounds = function (colIndex, rowIndex, rowHeight, borderWidth, columnBoundaries, columns) {\n    var cellLeft = columnBoundaries[colIndex].left;\n    var col = columns[colIndex];\n    return {\n      left: cellLeft,\n      top: rowIndex * (rowHeight + borderWidth),\n      right: cellLeft + col.width,\n      bottom: rowIndex * (rowHeight + borderWidth) + rowHeight,\n      width: col.width,\n      height: rowHeight\n    };\n  };\n\n  GridGeometry.calculateGridOffsetFromFraction = function (fraction, gridLength, canvasLength) {\n    return Math.floor((gridLength - canvasLength) * fraction);\n  };\n\n  GridGeometry.truncateGridOffset = function (oldOffset, gridSize, canvasSize) {\n    var maxX = gridSize.width - canvasSize.width;\n    var maxY = gridSize.height - canvasSize.height;\n\n    if (oldOffset.x > maxX || oldOffset.y > maxY) {\n      return {\n        x: Math.min(maxX, oldOffset.x),\n        y: Math.min(maxY, oldOffset.y)\n      };\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Takes an offset in CSS pixels and returns an offset also in CSS pixels, but quantised to\n   * values that produce an integer offset in canvas pixels. This avoids the canvas elements trying\n   * to do any sub-pixel rendering, and thus avoids bluriness in the grid.\n   */\n\n\n  GridGeometry.quantiseGridOffset = function (offset, dpr) {\n    return {\n      x: Math.floor(offset.x * dpr) / dpr,\n      y: Math.floor(offset.y * dpr) / dpr\n    };\n  };\n\n  GridGeometry.calculateGridOffsetForFocusedColumn = function (oldOffset, canvasSize, frozenColsWidth, focusedColIndex, columnBoundaries, verticalColumnGutter) {\n    if (focusedColIndex < 0 || focusedColIndex >= columnBoundaries.length) {\n      // The focused column index is invalid, so ignore it\n      return oldOffset;\n    }\n\n    var gutterWidth = verticalColumnGutter ? verticalColumnGutter.width : 0;\n    var focusedBoundaries = columnBoundaries[focusedColIndex];\n    var viewLeft = oldOffset.x + frozenColsWidth;\n    var viewRight = oldOffset.x + canvasSize.width - gutterWidth;\n\n    if (focusedBoundaries.left < viewLeft && focusedBoundaries.right > viewRight) {\n      // The focused column is wider that the canvas, but already visible - no change needed\n      return oldOffset;\n    } else if (focusedBoundaries.left < viewLeft) {\n      // The focused column is to the left, so move offset so it's the leftmost column\n      return {\n        x: Math.max(focusedBoundaries.left - frozenColsWidth, 0),\n        y: oldOffset.y\n      };\n    } else if (focusedBoundaries.right > viewRight) {\n      // The focused column is to the right, so move offset so it's the rightmost column\n      return {\n        x: focusedBoundaries.right - canvasSize.width + gutterWidth,\n        y: oldOffset.y\n      };\n    } else {\n      // Otherwise, the focused column must be in view, so no change is needed\n      return oldOffset;\n    }\n  };\n  /**\n   * Calculates the area of the grid visible on the canvas\n   */\n\n\n  GridGeometry.calculateVisibleRect = function (gridOffset, canvasSize) {\n    return {\n      top: gridOffset.y,\n      bottom: gridOffset.y + canvasSize.height,\n      height: canvasSize.height,\n      left: gridOffset.x,\n      right: gridOffset.x + canvasSize.width,\n      width: canvasSize.width\n    };\n  };\n\n  GridGeometry.isWindowPixelWithinComponent = function (event, root) {\n    if (!root) {\n      throw new Error('Cannot convert window coords to component coords because rootRef is not set');\n    }\n\n    var rootClientRect = root.getBoundingClientRect();\n    return event.clientX >= rootClientRect.left && event.clientX <= rootClientRect.right && event.clientY >= rootClientRect.top && event.clientY <= rootClientRect.bottom;\n  };\n\n  GridGeometry.calculateComponentPixel = function (event, root) {\n    return GridGeometry.windowPixelToComponentPixel({\n      x: event.clientX,\n      y: event.clientY\n    }, root);\n  };\n\n  GridGeometry.windowPixelToComponentPixel = function (_a, root) {\n    var x = _a.x,\n        y = _a.y;\n\n    if (!root) {\n      throw new Error('Cannot convert window coords to component coords because rootRef is not set');\n    }\n\n    var rootClientRect = root.getBoundingClientRect();\n    return {\n      x: x - rootClientRect.left,\n      y: y - rootClientRect.top\n    };\n  };\n\n  GridGeometry.windowPixelToGridPixel = function (_a, gridOffset, root) {\n    var x = _a.x,\n        y = _a.y;\n    var rootClientRect = root.getBoundingClientRect();\n    return {\n      x: x + gridOffset.x - rootClientRect.left,\n      y: y + gridOffset.y - rootClientRect.top\n    };\n  };\n\n  GridGeometry.gridPixelToGridCell = function (_a, columnBoundaries, borderWidth, rowHeight, maxRow) {\n    var x = _a.x,\n        y = _a.y; // Start with the rightmost col index; it'll be revised down, unless the coord is to the right of all cols\n\n    var colIndex = columnBoundaries.length - 1;\n\n    for (var i = 0; i < columnBoundaries.length; i++) {\n      if (columnBoundaries[i].right > x) {\n        colIndex = i;\n        break;\n      }\n    }\n    /*\n    The following (dodgy?) algebra gives the formula for finding the row index, where borders belong to lower cells:\n        Yclick <= (Ycell-1)b + (Ycell)c\n        Yclick <= Ycell(b) - b + Ycell(c)\n        Yclick <= Ycell(b + c) - b\n        Yclick + b <= Ycell(b + c)\n        (Yclick + b)/(b + c) <= Ycell\n        Ycell >= (Yclick + b)/(b + c)\n        Ycell = floor((Yclick + b)/(b + c))\n    It's then truncated to maxRow, in case the coord is beyond the final row\n    */\n\n\n    var rowIndex = Math.min(maxRow, Math.floor((y + borderWidth) / (rowHeight + borderWidth)));\n    return {\n      y: rowIndex,\n      x: colIndex\n    };\n  };\n\n  return GridGeometry;\n}();\n\nexports.GridGeometry = GridGeometry;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.barWidth = 7;\nexports.barMarginToEdge = 2;\nexports.barCapMargin = 4;\nvar minBarLength = 10;\n\nfunction getHorizontalScrollbarLength(canvasSize, gridSize, frozenColsWidth) {\n  return calculateLength(canvasSize.width, gridSize.width, frozenColsWidth);\n}\n\nexports.getHorizontalScrollbarLength = getHorizontalScrollbarLength;\n\nfunction getVerticalScrollbarLength(canvasSize, gridSize, frozenRowsHeight) {\n  return calculateLength(canvasSize.height, gridSize.height, frozenRowsHeight);\n}\n\nexports.getVerticalScrollbarLength = getVerticalScrollbarLength;\n\nfunction calculateLength(canvasLength, gridLength, frozenLength) {\n  var availableLength = canvasLength - frozenLength - exports.barWidth - 2 * exports.barCapMargin - exports.barMarginToEdge;\n  var contentRatio = canvasLength / gridLength;\n  var length = Math.round(availableLength * contentRatio);\n  return Math.max(length, minBarLength);\n}\n\nexports.calculateLength = calculateLength;\n\nfunction getHorizontalScrollbarExtent(gridOffset, canvasSize, gridSize, horizontalBarLength, frozenColsWidth) {\n  return calculateExtent(gridOffset.x, canvasSize.width, gridSize.width, horizontalBarLength, frozenColsWidth);\n}\n\nexports.getHorizontalScrollbarExtent = getHorizontalScrollbarExtent;\n\nfunction getVerticalScrollbarExtent(gridOffset, canvasSize, gridSize, verticalBarLength, frozenRowsHeight) {\n  return calculateExtent(gridOffset.y, canvasSize.height, gridSize.height, verticalBarLength, frozenRowsHeight);\n}\n\nexports.getVerticalScrollbarExtent = getVerticalScrollbarExtent;\n\nfunction calculateExtent(gridOffset, canvasLength, gridLength, barLength, frozenLength) {\n  var scrollableGridLength = gridLength - canvasLength;\n  var scrollFraction = gridOffset / scrollableGridLength;\n  var scrollableCanvasLength = canvasLength - frozenLength - barLength - exports.barWidth - 2 * exports.barCapMargin - exports.barMarginToEdge;\n  var start = Math.round(scrollableCanvasLength * scrollFraction) + frozenLength + exports.barCapMargin;\n  return {\n    start: start,\n    end: start + barLength\n  };\n}\n\nexports.calculateExtent = calculateExtent;\n\nfunction getHorizontalScrollbarPos(extent, canvasSize, gridSize) {\n  if (gridSize.width > canvasSize.width) {\n    var transverse = calculateTransversePosition(canvasSize.height);\n    return {\n      extent: extent,\n      transverse: transverse\n    };\n  } else {\n    return null;\n  }\n}\n\nexports.getHorizontalScrollbarPos = getHorizontalScrollbarPos;\n\nfunction getVerticalScrollbarPos(extent, canvasSize, gridSize) {\n  if (gridSize.height > canvasSize.height) {\n    var transverse = calculateTransversePosition(canvasSize.width);\n    return {\n      extent: extent,\n      transverse: transverse\n    };\n  } else {\n    return null;\n  }\n}\n\nexports.getVerticalScrollbarPos = getVerticalScrollbarPos;\n\nfunction calculateTransversePosition(canvasTransverse) {\n  return canvasTransverse - exports.barWidth / 2 - exports.barMarginToEdge;\n}\n\nfunction getVerticalGutterBounds(canvasSize, gridSize) {\n  if (gridSize.height > canvasSize.height) {\n    return {\n      top: 0,\n      left: canvasSize.width - (exports.barWidth + exports.barMarginToEdge * 2),\n      height: canvasSize.height,\n      width: exports.barWidth + exports.barMarginToEdge * 2,\n      bottom: canvasSize.height,\n      right: canvasSize.width\n    };\n  } else {\n    return null;\n  }\n}\n\nexports.getVerticalGutterBounds = getVerticalGutterBounds;\n\nfunction getHorizontalGutterBounds(canvasSize, gridSize) {\n  if (gridSize.width > canvasSize.width) {\n    return {\n      left: 0,\n      top: canvasSize.height - (exports.barWidth + exports.barMarginToEdge * 2),\n      width: canvasSize.width,\n      height: exports.barWidth + exports.barMarginToEdge * 2,\n      right: canvasSize.width,\n      bottom: canvasSize.height\n    };\n  } else {\n    return null;\n  }\n}\n\nexports.getHorizontalGutterBounds = getHorizontalGutterBounds;\n\nfunction calculateFractionFromStartPos(start, frozenLength, canvasLength, barLength) {\n  var scrollableCanvasLength = canvasLength - frozenLength - barLength - exports.barWidth - 2 * exports.barCapMargin - exports.barMarginToEdge;\n  return Math.min(Math.max((start - frozenLength - exports.barCapMargin) / scrollableCanvasLength, 0), 1);\n}\n\nexports.calculateFractionFromStartPos = calculateFractionFromStartPos;\n\nfunction getHitScrollBar(coord, horizontalPosition, verticalPosition) {\n  var halfBarHeight = Math.floor(exports.barWidth / 2);\n\n  if (horizontalPosition) {\n    var hTop = horizontalPosition.transverse - halfBarHeight;\n    var hBottom = horizontalPosition.transverse + halfBarHeight;\n    var hExtent = horizontalPosition.extent;\n\n    if (coord.x >= hExtent.start && coord.x <= hExtent.end && coord.y >= hTop && coord.y <= hBottom) {\n      return 'x';\n    }\n  }\n\n  if (verticalPosition) {\n    var vLeft = verticalPosition.transverse - halfBarHeight;\n    var vRight = verticalPosition.transverse + halfBarHeight;\n    var vExtent = verticalPosition.extent;\n\n    if (coord.y >= vExtent.start && coord.y <= vExtent.end && coord.x >= vLeft && coord.x <= vRight) {\n      return 'y';\n    }\n  }\n\n  return null;\n}\n\nexports.getHitScrollBar = getHitScrollBar;","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar instigator_1 = require(\"instigator\");\n\nvar React = __importStar(require(\"react\"));\n\nvar gridCanvasRenderer_1 = require(\"./gridCanvasRenderer\");\n\nvar GridCanvas =\n/** @class */\nfunction (_super) {\n  __extends(GridCanvas, _super);\n\n  function GridCanvas() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.canvasRef = React.createRef();\n    _this.renderer = null;\n    _this.renderCallback = null;\n    return _this; // TODO: Need to call updateProps on componentDidUpdate?\n  }\n\n  GridCanvas.prototype.render = function () {\n    return React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      width: this.props.width * this.props.gridState.dpr(),\n      height: this.props.height * this.props.gridState.dpr(),\n      style: {\n        position: 'absolute',\n        top: this.props.top + \"px\",\n        left: this.props.left + \"px\",\n        width: this.props.width + \"px\",\n        height: this.props.height + \"px\"\n      }\n    });\n  };\n\n  GridCanvas.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (!this.canvasRef.current) {\n      throw new Error('canvasRef is null in componentDidMount - cannot create renderer');\n    }\n\n    var gridState = this.props.gridState;\n    var basicProps = instigator_1.transformer([gridState.data, gridState.rowHeight, gridState.columnBoundaries, gridState.columns, gridState.gridInnerSize, gridState.borderWidth], function (data, rowHeight, colBoundaries, columns, gridInnerSize, borderWidth) {\n      return {\n        data: data,\n        rowHeight: rowHeight,\n        colBoundaries: colBoundaries,\n        columns: columns,\n        gridInnerSize: gridInnerSize,\n        borderWidth: borderWidth\n      };\n    });\n    {\n      var canvasSize = {\n        width: this.props.width,\n        height: this.props.height\n      };\n      this.renderer = new gridCanvasRenderer_1.GridCanvasRenderer(this.canvasRef.current, canvasSize, basicProps(), gridState.dpr());\n    }\n    this.renderCallback = instigator_1.consumer([basicProps, this.props.posProps], function (newBasicProps, newPosProps) {\n      if (_this.renderer) {\n        if (!_this.canvasRef.current) {\n          throw new Error('canvasRef is null in componentDidMount - cannot create renderer');\n        }\n\n        var canvasSize = {\n          width: _this.props.width,\n          height: _this.props.height\n        };\n\n        _this.renderer.updateProps(_this.canvasRef.current, canvasSize, newBasicProps, newPosProps);\n      }\n    });\n  };\n\n  GridCanvas.prototype.componentWillUnmount = function () {\n    if (this.renderCallback) {\n      this.renderCallback.deregister();\n    }\n  };\n\n  return GridCanvas;\n}(React.Component);\n\nexports.GridCanvas = GridCanvas;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.cellHasTextFunction = function (cell) {\n  return !!cell.getText;\n};\n\nexports.getCellText = function (cell) {\n  return exports.cellHasTextFunction(cell) ? cell.getText(cell.data) : cell.text;\n};\n\nexports.cellIsEditable = function (cell) {\n  return !!cell.editor;\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar scrolling_1 = require(\"./scrolling\");\n\nvar scrollBySelectionDragTimerId = null;\n\nexports.clearScrollByDragTimer = function () {\n  if (scrollBySelectionDragTimerId) {\n    clearInterval(scrollBySelectionDragTimerId);\n    scrollBySelectionDragTimerId = null;\n  }\n};\n\nexports.startScrollBySelectionDragIfNeeded = function (gridState, componentPixelCoord, updateSelection, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var rootSize = gridState.rootSize();\n\n  if (!rootSize) {\n    return;\n  } // Clear any old scroll timer - the mouse pos has changed, so we'll set up a new timer if needed\n\n\n  exports.clearScrollByDragTimer();\n  var deltaX = 0;\n\n  if (options.suppressX !== true) {\n    if (componentPixelCoord.x < 10) {\n      deltaX = -15;\n    } else if (componentPixelCoord.x < 20) {\n      deltaX = -10;\n    } else if (componentPixelCoord.x < 40) {\n      deltaX = -5;\n    } else if (componentPixelCoord.x < 50) {\n      deltaX = -1;\n    } else if (componentPixelCoord.x > rootSize.width - 10) {\n      deltaX = 15;\n    } else if (componentPixelCoord.x > rootSize.width - 20) {\n      deltaX = 10;\n    } else if (componentPixelCoord.x > rootSize.width - 40) {\n      deltaX = 5;\n    } else if (componentPixelCoord.x > rootSize.width - 50) {\n      deltaX = 1;\n    }\n  }\n\n  var deltaY = 0;\n\n  if (options.suppressY !== true) {\n    if (componentPixelCoord.y < 10) {\n      deltaY = -15;\n    } else if (componentPixelCoord.y < 20) {\n      deltaY = -10;\n    } else if (componentPixelCoord.y < 40) {\n      deltaY = -5;\n    } else if (componentPixelCoord.y < 50) {\n      deltaY = -1;\n    } else if (componentPixelCoord.y > rootSize.height - 10) {\n      deltaY = 15;\n    } else if (componentPixelCoord.y > rootSize.height - 20) {\n      deltaY = 10;\n    } else if (componentPixelCoord.y > rootSize.height - 40) {\n      deltaY = 5;\n    } else if (componentPixelCoord.y > rootSize.height - 50) {\n      deltaY = 1;\n    }\n  }\n\n  if (deltaX !== 0 || deltaY !== 0) {\n    var updateOffsetByDeltaAndUpdateSelection = function updateOffsetByDeltaAndUpdateSelection() {\n      scrolling_1.updateOffsetByDelta(deltaX, deltaY, gridState);\n      updateSelection();\n    };\n\n    scrollBySelectionDragTimerId = setInterval(updateOffsetByDeltaAndUpdateSelection, 10);\n    scrolling_1.updateOffsetByDelta(deltaX, deltaY, gridState);\n  }\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../utils\");\n\nexports.updateOffsetByDelta = function (deltaX, deltaY, gridState) {\n  if (!gridState.rootSize()) {\n    return false;\n  }\n\n  var canvasSize = gridState.canvasSize();\n  var gridSize = gridState.gridSize();\n  var gridOffset = gridState.gridOffset();\n  var newX = utils_1.numberBetween(gridOffset.x + deltaX, 0, gridSize.width - canvasSize.width);\n  var newY = utils_1.numberBetween(gridOffset.y + deltaY, 0, gridSize.height - canvasSize.height);\n\n  if (newX === gridOffset.x && newY === gridOffset.y) {\n    // We won't be moving, so return false\n    return false;\n  }\n\n  gridState.gridOffsetRaw({\n    x: newX,\n    y: newY\n  }); // We did move, so return true\n\n  return true;\n};","\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar cursorState_1 = require(\"../cursorState\");\n\nvar cursorState = __importStar(require(\"../cursorState\"));\n\nexports.startOrUpdateSelection = function (event, props, gridState, gridCoords) {\n  if (event.shiftKey && cursorState_1.hasSelectionState(gridState.cursorState())) {\n    exports.updateSelection(props, gridState, gridCoords);\n  } else {\n    exports.startSelection(props, gridState, gridCoords);\n  }\n};\n\nexports.selectOrUpdateRow = function (event, props, gridState, gridCoords) {\n  if (event.shiftKey && cursorState_1.hasSelectionState(gridState.cursorState())) {\n    exports.updateSelectionRow(props, gridState, gridCoords);\n  } else {\n    exports.selectRow(props, gridState, gridCoords);\n  }\n};\n\nexports.selectOrUpdateCol = function (event, props, gridState, gridCoords) {\n  if (event.shiftKey && cursorState_1.hasSelectionState(gridState.cursorState())) {\n    exports.updateSelectionCol(props, gridState, gridCoords);\n  } else {\n    exports.selectCol(props, gridState, gridCoords);\n  }\n};\n\nexports.startSelection = function (props, gridState, gridCoords) {\n  var newCursorState = cursorState.startDrag(gridCoords);\n  startSelectionWithCursorState(props, gridState, newCursorState);\n};\n\nexports.selectAll = function (props, gridState) {\n  var newCursorState = cursorState.startRangeCorner({\n    x: props.frozenCols,\n    y: props.frozenRows\n  }, {\n    x: props.columns.length - 1,\n    y: props.data.length - 1\n  });\n  startSelectionWithCursorState(props, gridState, newCursorState);\n};\n\nexports.selectRow = function (props, gridState, coord) {\n  var newCursorState = cursorState.startRangeRow({\n    x: props.frozenCols,\n    y: coord.y\n  }, {\n    x: props.columns.length - 1,\n    y: coord.y\n  });\n  startSelectionWithCursorState(props, gridState, newCursorState);\n};\n\nexports.selectCol = function (props, gridState, coord) {\n  var newCursorState = cursorState.startRangeColumn({\n    x: coord.x,\n    y: props.frozenRows\n  }, {\n    x: coord.x,\n    y: props.data.length - 1\n  });\n  startSelectionWithCursorState(props, gridState, newCursorState);\n};\n\nvar startSelectionWithCursorState = function startSelectionWithCursorState(props, gridState, newCursorState) {\n  if (props.onSelectionChangeStart) {\n    props.onSelectionChangeStart(newCursorState.selection.selectedRange);\n  }\n\n  gridState.cursorState(newCursorState);\n};\n\nexports.updateSelection = function (props, gridState, gridCoords) {\n  var oldCursorState = gridState.cursorState();\n\n  if (!cursorState_1.hasSelectionCellState(oldCursorState)) {\n    return;\n  }\n\n  var truncatedCoords = {\n    x: Math.max(gridCoords.x, props.frozenCols),\n    y: Math.max(gridCoords.y, props.frozenRows)\n  };\n  var newCursorState = cursorState.updateDrag(oldCursorState, truncatedCoords);\n  updateCursorStateIfDifferent(props, gridState, oldCursorState, newCursorState);\n};\n\nexports.updateSelectionRow = function (props, gridState, coord) {\n  var oldCursorState = gridState.cursorState();\n\n  if (!cursorState_1.hasSelectionRowState(oldCursorState)) {\n    return;\n  }\n\n  var newCursorState = cursorState.updateRangeRow(oldCursorState, coord);\n  updateCursorStateIfDifferent(props, gridState, oldCursorState, newCursorState);\n};\n\nexports.updateSelectionCol = function (props, gridState, coord) {\n  var oldCursorState = gridState.cursorState();\n\n  if (!cursorState.hasSelectionColumnState(oldCursorState)) {\n    return;\n  }\n\n  var newCursorState = cursorState.updateRangeColumn(oldCursorState, coord);\n  updateCursorStateIfDifferent(props, gridState, oldCursorState, newCursorState);\n};\n\nvar updateCursorStateIfDifferent = function updateCursorStateIfDifferent(props, gridState, oldCursorState, newCursorState) {\n  if (props.onSelectionChangeUpdate) {\n    var rangeChanged = cursorState.isSelectRangeDifferent(oldCursorState.selection.selectedRange, newCursorState.selection.selectedRange);\n\n    if (rangeChanged) {\n      props.onSelectionChangeUpdate(newCursorState.selection.selectedRange);\n    }\n  }\n\n  gridState.cursorState(newCursorState);\n};\n\nexports.endSelection = function (props, gridState) {\n  if (!cursorState_1.hasSelectionState(gridState.cursorState())) {\n    return;\n  }\n\n  if (props.onSelectionChangeEnd) {\n    var currentCursorState = gridState.cursorState();\n    props.onSelectionChangeEnd(cursorState.hasSelectionState(currentCursorState) ? currentCursorState.selection.selectedRange : null);\n  }\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = require(\"./types\");\n\nexports.borderColour = 'lightgrey';\n\nvar CommonCanvasRenderer =\n/** @class */\nfunction () {\n  function CommonCanvasRenderer(canvas, dpr, alpha) {\n    var _this = this;\n\n    this.queuedRender = null;\n\n    this.setCanvas = function (canvas) {\n      _this.canvas = canvas;\n\n      var context = _this.canvas.getContext('2d', {\n        alpha: _this.alpha\n      });\n\n      if (!context) {\n        throw new Error('Could not create canvas contex');\n      }\n\n      _this.context = context;\n    };\n\n    this.drawCellBackgroundDefault = function (context, cellBounds) {\n      context.fillStyle = 'white';\n      context.fillRect(cellBounds.left, cellBounds.top, cellBounds.width, cellBounds.height);\n    };\n\n    this.drawCellTextDefault = function (context, cellBounds, cell) {\n      context.fillStyle = 'black';\n      context.textBaseline = 'middle';\n      var verticalCentre = cellBounds.top + cellBounds.height / 2;\n      var text = types_1.getCellText(cell);\n      context.fillText(text, cellBounds.left + 2, verticalCentre, cellBounds.width - 4);\n    };\n\n    this.alpha = alpha;\n    this.dpr = dpr; // Below is same as setCanvas, copied here to appease compiler\n\n    this.canvas = canvas;\n    var context = this.canvas.getContext('2d', {\n      alpha: this.alpha\n    });\n\n    if (!context) {\n      throw new Error('Could not create canvas contex');\n    }\n\n    this.context = context;\n  }\n\n  CommonCanvasRenderer.prototype.drawScaled = function (draw) {\n    var _this = this;\n\n    if (this.queuedRender !== null) {\n      return;\n    }\n\n    this.queuedRender = window.requestAnimationFrame(function () {\n      _this.context.scale(_this.dpr, _this.dpr);\n\n      try {\n        draw();\n      } finally {\n        _this.context.scale(1 / _this.dpr, 1 / _this.dpr);\n\n        _this.queuedRender = null;\n      }\n    });\n  };\n\n  CommonCanvasRenderer.prototype.drawCell = function (cell, cellBounds, metadata) {\n    var renderBackground = cell.renderBackground || this.drawCellBackgroundDefault;\n    var renderText = cell.renderText || this.drawCellTextDefault;\n    renderBackground(this.context, cellBounds, cell, metadata);\n    renderText(this.context, cellBounds, cell, metadata);\n  };\n\n  return CommonCanvasRenderer;\n}();\n\nexports.CommonCanvasRenderer = CommonCanvasRenderer;","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar commonCanvasRenderer_1 = require(\"./commonCanvasRenderer\");\n\nvar cursorState = __importStar(require(\"./cursorState\"));\n\nvar ScrollGeometry = __importStar(require(\"./scrollbarGeometry\"));\n\nvar defaultPosProps = {\n  gridOffset: {\n    x: 0,\n    y: 0\n  },\n  visibleRect: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    height: 0,\n    width: 0\n  }\n};\nvar defaultScrollbarProps = {\n  horizontalScrollbarPos: null,\n  verticalScrollbarPos: null,\n  hoveredScrollbar: null\n};\nvar defaultScrollbarStyle = 'rgba(0, 0, 0, 0.4)';\nvar hoveredScrollbarStyle = 'rgba(0, 0, 0, 0.55)';\n\nvar HighlightCanvasRenderer =\n/** @class */\nfunction (_super) {\n  __extends(HighlightCanvasRenderer, _super);\n\n  function HighlightCanvasRenderer(canvas, basicProps, dpr) {\n    var _this = _super.call(this, canvas, dpr, true) || this;\n\n    _this.posProps = defaultPosProps;\n    _this.scrollProps = defaultScrollbarProps;\n    _this.selectionProps = {\n      cursorState: cursorState.createDefault()\n    };\n\n    _this.draw = function () {\n      var context = _this.context; // Clear the higlight layer\n\n      context.clearRect(0, 0, _this.canvas.width, _this.canvas.height); // Translate the canvas context so that it's covering the visibleRect\n      // (so when we translate it back, what we've drawn is within the bounds of the canvas element)\n\n      context.translate(-_this.posProps.gridOffset.x, -_this.posProps.gridOffset.y);\n      context.lineCap = 'butt';\n      context.fillStyle = 'rgba(33, 117, 228, 0.25)';\n      context.strokeStyle = '#2276e4'; // Draw edit cursor cell outline\n\n      if (_this.selectionProps.cursorState.editCursorCell) {\n        context.lineWidth = 2;\n\n        var rect = _this.gridCellCoordToGridPixelCoord(_this.selectionProps.cursorState.editCursorCell);\n\n        context.strokeRect(rect.left, rect.top, rect.width, rect.height);\n        context.lineWidth = 1;\n      } // Draw selected cell highlights\n\n\n      if (_this.selectionProps.cursorState.selection && isSelectionMoreThanOneCell(_this.selectionProps.cursorState.selection)) {\n        var tl = _this.gridCellCoordToGridPixelCoord(_this.selectionProps.cursorState.selection.selectedRange.topLeft);\n\n        var br = _this.gridCellCoordToGridPixelCoord(_this.selectionProps.cursorState.selection.selectedRange.bottomRight);\n\n        context.fillRect(tl.left, tl.top, br.right - tl.left, br.bottom - tl.top);\n        context.strokeRect(tl.left, tl.top, br.right - tl.left, br.bottom - tl.top);\n      } // Translate back, to bring our drawn area into the bounds of the canvas element\n\n\n      context.translate(_this.posProps.gridOffset.x, _this.posProps.gridOffset.y); // Draw scrollbar gutters\n\n      var vBounds = _this.basicProps.verticalGutterBounds;\n      var hBounds = _this.basicProps.horizontalGutterBounds;\n\n      if (vBounds || hBounds) {\n        _this.context.fillStyle = '#eee';\n\n        if (vBounds) {\n          _this.context.fillRect(vBounds.left, vBounds.top, vBounds.width, vBounds.height);\n        }\n\n        if (hBounds) {\n          _this.context.fillRect(hBounds.left, hBounds.top, hBounds.width, hBounds.height);\n        }\n\n        _this.context.strokeStyle = 'lightgrey';\n        _this.context.lineWidth = 1;\n\n        _this.context.beginPath();\n\n        if (vBounds) {\n          _this.context.moveTo(vBounds.left, 0);\n\n          _this.context.lineTo(vBounds.left, vBounds.height - (hBounds ? hBounds.height : 0));\n\n          _this.context.moveTo(vBounds.right, 0);\n\n          _this.context.lineTo(vBounds.right, vBounds.height);\n        }\n\n        if (hBounds) {\n          _this.context.moveTo(0, hBounds.top);\n\n          _this.context.lineTo(hBounds.width - (vBounds ? vBounds.width : 0), hBounds.top);\n\n          _this.context.moveTo(0, hBounds.bottom);\n\n          _this.context.lineTo(hBounds.width, hBounds.bottom);\n        }\n\n        _this.context.stroke();\n      } // Set up for drawing scrollbars\n\n\n      context.lineCap = 'round'; // Draw horizontal scrollbar (if needed)\n\n      if (_this.scrollProps.horizontalScrollbarPos) {\n        if (_this.scrollProps.hoveredScrollbar === 'x') {\n          context.strokeStyle = hoveredScrollbarStyle;\n          context.lineWidth = ScrollGeometry.barWidth + 3;\n        } else {\n          context.strokeStyle = defaultScrollbarStyle;\n          context.lineWidth = ScrollGeometry.barWidth;\n        }\n\n        var scrollPos = _this.scrollProps.horizontalScrollbarPos;\n        context.beginPath();\n        context.moveTo(scrollPos.extent.start, scrollPos.transverse);\n        context.lineTo(scrollPos.extent.end, scrollPos.transverse);\n        context.stroke();\n      } // Draw vertical scrollbar (if needed)\n\n\n      if (_this.scrollProps.verticalScrollbarPos) {\n        if (_this.scrollProps.hoveredScrollbar === 'y') {\n          context.strokeStyle = hoveredScrollbarStyle;\n          context.lineWidth = ScrollGeometry.barWidth + 3;\n        } else {\n          context.strokeStyle = defaultScrollbarStyle;\n          context.lineWidth = ScrollGeometry.barWidth;\n        }\n\n        var scrollPos = _this.scrollProps.verticalScrollbarPos;\n        context.beginPath();\n        context.moveTo(scrollPos.transverse, scrollPos.extent.start);\n        context.lineTo(scrollPos.transverse, scrollPos.extent.end);\n        context.stroke();\n      }\n    };\n\n    _this.gridCellCoordToGridPixelCoord = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n      return {\n        top: y * (_this.basicProps.rowHeight + _this.basicProps.borderWidth),\n        bottom: (y + 1) * (_this.basicProps.rowHeight + +_this.basicProps.borderWidth) - _this.basicProps.borderWidth,\n        height: _this.basicProps.rowHeight,\n        left: _this.basicProps.columnBoundaries[x].left,\n        right: _this.basicProps.columnBoundaries[x].right,\n        width: _this.basicProps.columnBoundaries[x].right - _this.basicProps.columnBoundaries[x].left\n      };\n    };\n\n    _this.basicProps = basicProps;\n    return _this;\n  }\n\n  HighlightCanvasRenderer.prototype.updateProps = function (canvas, basicProps, posProps, scrollProps, selectProps) {\n    if (this.canvas !== canvas) {\n      this.setCanvas(canvas);\n    }\n\n    this.basicProps = basicProps;\n    this.posProps = posProps;\n    this.scrollProps = scrollProps, this.selectionProps = selectProps;\n    this.drawScaled(this.draw);\n  };\n\n  return HighlightCanvasRenderer;\n}(commonCanvasRenderer_1.CommonCanvasRenderer);\n\nexports.HighlightCanvasRenderer = HighlightCanvasRenderer;\n\nfunction isSelectionMoreThanOneCell(selection) {\n  var tl = selection.selectedRange.topLeft;\n  var br = selection.selectedRange.bottomRight;\n  return tl.x !== br.x || tl.y !== br.y;\n}\n\nfunction shouldSelectionClear(prev, next) {\n  return prev.columns !== next.columns || prev.data.length !== next.data.length;\n}\n\nexports.shouldSelectionClear = shouldSelectionClear;","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar instigator_1 = require(\"instigator\");\n\nvar React = __importStar(require(\"react\"));\n\nvar cursorState = __importStar(require(\"./cursorState\"));\n\nvar gridMouseEvents_1 = require(\"./eventHandlers/gridMouseEvents\");\n\nvar scrollbarMouseEvents_1 = require(\"./eventHandlers/scrollbarMouseEvents\");\n\nvar scrolling_1 = require(\"./eventHandlers/scrolling\");\n\nvar FrozenCanvas_1 = require(\"./FrozenCanvas\");\n\nvar gridGeometry_1 = require(\"./gridGeometry\");\n\nvar gridState_1 = require(\"./gridState\");\n\nvar HighlightCanvas_1 = require(\"./HighlightCanvas\");\n\nvar highlightCanvasRenderer_1 = require(\"./highlightCanvasRenderer\");\n\nvar InlineEditor_1 = require(\"./InlineEditor\");\n\nvar MainCanvas_1 = require(\"./MainCanvas\");\n\nvar types_1 = require(\"./types\");\n\nvar ReactCanvasGrid =\n/** @class */\nfunction (_super) {\n  __extends(ReactCanvasGrid, _super);\n\n  function ReactCanvasGrid(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.rootRef = React.createRef();\n\n    _this.onWheel = function (e) {\n      // Browsers may use a 'delta mode' when wheeling, requesting multi-pixel movement\n      // See https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\n      var scaleFactors = {\n        0: 1,\n        1: 16\n      };\n      var scaleFactor = scaleFactors[e.deltaMode || 0];\n      var willUpdate = scrolling_1.updateOffsetByDelta(e.deltaX * scaleFactor, e.deltaY * scaleFactor, _this.gridState);\n\n      if (willUpdate) {\n        // The grid is going to move, so we want to prevent any other scrolling from happening\n        e.preventDefault();\n      }\n    };\n\n    _this.onMouseDown = function (event) {\n      var gridSize = _this.gridState.gridSize();\n\n      var coord = gridGeometry_1.GridGeometry.calculateComponentPixel(event, _this.rootRef.current);\n\n      if (coord.x >= gridSize.width || coord.y >= gridSize.height) {\n        // The click happened within the component but outside the grid, so ignore it\n        return;\n      }\n\n      if (scrollbarMouseEvents_1.mouseDownOnScrollbar(coord, _this.gridState)) {\n        return;\n      }\n\n      gridMouseEvents_1.mouseDownOnGrid(event, coord, _this.rootRef, _this.props, _this.gridState, _this.state.editingCell);\n    };\n\n    _this.onMouseMove = function (event) {\n      var coord = gridGeometry_1.GridGeometry.calculateComponentPixel(event, _this.rootRef.current);\n\n      var gridSize = _this.gridState.gridSize();\n\n      if (coord.x >= gridSize.width || coord.y >= gridSize.height) {\n        // The drag has gone beyond the edge of the grid (even if still in the component), so ignore it\n        return;\n      }\n\n      if (scrollbarMouseEvents_1.mouseDragOnScrollbar(coord, _this.gridState)) {\n        return;\n      } else if (gridMouseEvents_1.mouseDragOnGrid(event, _this.rootRef, _this.props, _this.gridState, _this.state.editingCell)) {\n        return;\n      } else {\n        scrollbarMouseEvents_1.mouseHoverOnScrollbar(coord, _this.gridState);\n      }\n    };\n\n    _this.onMouseUp = function (event) {\n      instigator_1.batch(function () {\n        var coord = gridGeometry_1.GridGeometry.calculateComponentPixel(event, _this.rootRef.current);\n\n        if (scrollbarMouseEvents_1.mouseUpOnScrollbar()) {\n          scrollbarMouseEvents_1.mouseHoverOnScrollbar(coord, _this.gridState);\n          return;\n        }\n\n        gridMouseEvents_1.mouseUpOnGrid(_this.props, _this.gridState, _this.state.editingCell);\n      });\n    };\n\n    _this.onDoubleClick = function (event) {\n      var cellCoords = gridGeometry_1.GridGeometry.calculateGridCellCoordsFromGridState(event, _this.rootRef.current, _this.gridState);\n\n      _this.startEditingCell(cellCoords);\n    };\n\n    _this.startEditingCell = function (cellCoords) {\n      var cellBounds = gridGeometry_1.GridGeometry.calculateCellBounds(cellCoords.x, cellCoords.y, _this.props.rowHeight, _this.props.borderWidth, _this.gridState.columnBoundaries(), _this.props.columns);\n      var col = _this.props.columns[cellCoords.x];\n      var cell = _this.props.data[cellCoords.y][col.fieldName];\n\n      if (!types_1.cellIsEditable(cell)) {\n        return;\n      }\n\n      _this.setState({\n        editingCell: __assign({\n          cell: cell,\n          colIndex: cellCoords.x,\n          rowIndex: cellCoords.y\n        }, cellBounds, {\n          fieldName: col.fieldName\n        })\n      });\n    };\n\n    _this.cancelEditingCell = function () {\n      _this.setState({\n        editingCell: null\n      }, _this.focusRoot);\n    };\n\n    _this.stopEditingCell = function (newData) {\n      if (_this.state.editingCell === null) {\n        return;\n      }\n\n      if (_this.props.onCellDataChanged) {\n        _this.props.onCellDataChanged({\n          cell: _this.state.editingCell.cell,\n          colIndex: _this.state.editingCell.colIndex,\n          rowIndex: _this.state.editingCell.rowIndex,\n          fieldName: _this.state.editingCell.fieldName,\n          newData: newData\n        });\n      }\n\n      _this.setState({\n        editingCell: null\n      }, _this.focusRoot);\n    };\n\n    _this.focusRoot = function () {\n      if (_this.rootRef.current) {\n        _this.rootRef.current.focus({\n          preventScroll: true\n        });\n      }\n    };\n\n    _this.gridState = new gridState_1.GridState(props.columns, props.data, props.rowHeight, props.borderWidth, props.frozenRows, props.frozenCols);\n    _this.state = {\n      rootSize: null,\n      gridOffset: _this.gridState.gridOffset(),\n      editingCell: null\n    };\n    return _this;\n  }\n\n  ReactCanvasGrid.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (!this.rootRef.current) {\n      throw new Error('root element ref not set in componentDidMount, so cannot determine canvas size');\n    }\n\n    var rootRect = this.rootRef.current.getBoundingClientRect();\n    this.rootRef.current.addEventListener('wheel', this.onWheel);\n    window.addEventListener('mousemove', this.onMouseMove);\n    window.addEventListener('mouseup', this.onMouseUp); // Set the rootSize, causing a re-render, at which point the canvases will be properly sized.\n    // Once the state has been set and everything has re-rendered, we can set the rootSize, causing\n    // the renderers to redraw.\n\n    this.setState({\n      rootSize: {\n        width: rootRect.width,\n        height: rootRect.height\n      }\n    }, function () {\n      _this.gridState.rootSize({\n        width: rootRect.width,\n        height: rootRect.height\n      });\n    }); // Keep the gridState gridOffset and the React state gridOffset in sync\n\n    instigator_1.consumer([this.gridState.gridOffset], function (gridOffset) {\n      return _this.setState({\n        gridOffset: gridOffset\n      });\n    });\n  };\n\n  ReactCanvasGrid.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this;\n\n    if (!this.rootRef.current) {\n      throw new Error('root element ref not set in componentDidMount, so cannot determine canvas size');\n    }\n\n    var rootRect = this.rootRef.current.getBoundingClientRect();\n    instigator_1.batch(function () {\n      _this.gridState.columns(_this.props.columns);\n\n      _this.gridState.data(_this.props.data);\n\n      _this.gridState.rowHeight(_this.props.rowHeight);\n\n      _this.gridState.borderWidth(_this.props.borderWidth);\n\n      _this.gridState.frozenRows(_this.props.frozenRows);\n\n      _this.gridState.frozenCols(_this.props.frozenCols);\n\n      _this.gridState.rootSize({\n        width: rootRect.width,\n        height: rootRect.height\n      });\n\n      if (highlightCanvasRenderer_1.shouldSelectionClear(prevProps, _this.props)) {\n        _this.gridState.cursorState(cursorState.createDefault());\n\n        if (_this.props.onSelectionCleared) {\n          _this.props.onSelectionCleared();\n        }\n      }\n\n      var gridSize = _this.gridState.gridSize();\n\n      var canvasSize = _this.gridState.canvasSize();\n\n      var truncatedOffset = gridGeometry_1.GridGeometry.truncateGridOffset(_this.gridState.gridOffset(), gridSize, canvasSize);\n\n      if (truncatedOffset) {\n        _this.gridState.gridOffsetRaw(truncatedOffset);\n      }\n\n      if (_this.props.focusedColIndex !== null && _this.props.focusedColIndex !== prevProps.focusedColIndex) {\n        var focusedOffset = gridGeometry_1.GridGeometry.calculateGridOffsetForFocusedColumn(_this.gridState.gridOffset(), canvasSize, _this.gridState.frozenColsWidth(), _this.props.focusedColIndex, _this.gridState.columnBoundaries(), _this.gridState.verticalGutterBounds());\n\n        _this.gridState.gridOffsetRaw(focusedOffset);\n      }\n    });\n  };\n\n  ReactCanvasGrid.prototype.componentWillUnmount = function () {\n    if (this.rootRef.current) {\n      this.rootRef.current.removeEventListener('wheel', this.onWheel);\n    }\n\n    window.removeEventListener('mousemove', this.onMouseMove);\n    window.removeEventListener('mouseup', this.onMouseUp);\n  };\n\n  ReactCanvasGrid.prototype.render = function () {\n    // Since we're rendering, the props have just changed. The values in gridState won't update until\n    // componentDidMount is run, however, so we can't use them, and have to calculate fresh values\n    // here in render and throw them away. Props changes should be rare, and unlikely to be extremely\n    // performance sensitive, so this probably won't cause noticeable problems.\n    var columnBoundaries = gridGeometry_1.GridGeometry.calculateColumnBoundaries(this.props.columns, this.props.borderWidth);\n    var gridSize = gridGeometry_1.GridGeometry.calculateGridSize(this.props.data, columnBoundaries, this.props.rowHeight, this.props.borderWidth);\n    var gridPlusGutterSize = gridGeometry_1.GridGeometry.calculateGridPlusGutterSize(gridSize, this.state.rootSize);\n    var canvasSize = gridGeometry_1.GridGeometry.calculateCanvasSize(gridPlusGutterSize, this.state.rootSize);\n    var frozenColsWidth = gridGeometry_1.GridGeometry.calculateFrozenColsWidth(columnBoundaries, this.props.frozenCols, this.props.borderWidth);\n    var frozenRowsHeight = gridGeometry_1.GridGeometry.calculateFrozenRowsHeight(this.props.rowHeight, this.props.borderWidth, this.props.frozenRows);\n    return React.createElement(\"div\", {\n      ref: this.rootRef,\n      className: \"react-canvas-grid\",\n      onMouseDown: this.onMouseDown,\n      onDoubleClick: this.onDoubleClick,\n      tabIndex: 1,\n      style: {\n        position: 'relative',\n        width: this.props.cssWidth,\n        height: this.props.cssHeight,\n        overflow: 'hidden',\n        outline: 'none'\n      }\n    }, React.createElement(MainCanvas_1.MainCanvas, {\n      width: canvasSize.width,\n      height: canvasSize.height,\n      frozenColsWidth: frozenColsWidth,\n      frozenRowsHeight: frozenRowsHeight,\n      gridState: this.gridState\n    }), React.createElement(HighlightCanvas_1.HighlightCanvas, {\n      width: canvasSize.width,\n      height: canvasSize.height,\n      gridState: this.gridState\n    }), this.state.editingCell && React.createElement(InlineEditor_1.InlineTextEditor, {\n      cell: this.state.editingCell.cell,\n      left: this.state.editingCell.left,\n      top: this.state.editingCell.top,\n      width: this.state.editingCell.width,\n      height: this.state.editingCell.height,\n      gridOffset: this.state.gridOffset,\n      onSubmit: this.stopEditingCell,\n      onCancel: this.cancelEditingCell\n    }), React.createElement(FrozenCanvas_1.FrozenCanvas, {\n      width: canvasSize.width,\n      height: canvasSize.height,\n      frozenColsWidth: frozenColsWidth,\n      frozenRowsHeight: frozenRowsHeight,\n      gridState: this.gridState\n    }));\n  };\n\n  ReactCanvasGrid.defaultProps = {\n    cssWidth: '100%',\n    cssHeight: '100%',\n    borderWidth: 1,\n    frozenRows: 0,\n    frozenCols: 0,\n    focusedColIndex: null\n  };\n  return ReactCanvasGrid;\n}(React.PureComponent);\n\nexports.ReactCanvasGrid = ReactCanvasGrid;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar cursorState_1 = require(\"../cursorState\");\n\nvar gridGeometry_1 = require(\"../gridGeometry\");\n\nvar frozenCellMouseEvents_1 = require(\"./frozenCellMouseEvents\");\n\nvar mouseEvents_1 = require(\"./mouseEvents\");\n\nvar scrollingTimer_1 = require(\"./scrollingTimer\");\n\nvar selection_1 = require(\"./selection\");\n\nexports.mouseDownOnGrid = function (event, componentPixelCoord, rootRef, props, gridState, editingCell) {\n  if (!mouseEvents_1.isLeftButton(event)) {\n    return;\n  }\n\n  if (editingCell !== null) {\n    // We're editing a cell, so ignore clicks on grid\n    return;\n  }\n\n  if (frozenCellMouseEvents_1.leftClickOnFrozenCell(event, componentPixelCoord, rootRef, props, gridState)) {\n    return;\n  }\n\n  var gridCoords = gridGeometry_1.GridGeometry.calculateGridCellCoordsFromGridState(event, rootRef.current, gridState);\n  selection_1.startOrUpdateSelection(event, props, gridState, gridCoords);\n};\n\nexports.mouseDragOnGrid = function (event, rootRef, props, gridState, editingCell) {\n  if (!mouseEvents_1.isLeftButton(event)) {\n    return false;\n  }\n\n  if (editingCell !== null) {\n    // We're editing a cell, so ignore grid drags\n    return false;\n  }\n\n  var currentCursorState = gridState.cursorState();\n\n  if (!cursorState_1.hasSelectionState(currentCursorState)) {\n    return false;\n  }\n\n  var componentPixelCoord = gridGeometry_1.GridGeometry.calculateComponentPixel(event, rootRef.current);\n\n  if (frozenCellMouseEvents_1.leftClickDragOnFrozenCell(currentCursorState, event, componentPixelCoord, rootRef, props, gridState)) {\n    return true;\n  }\n\n  var clientX = event.clientX,\n      clientY = event.clientY;\n\n  var recalculateAndUpdateSelection = function recalculateAndUpdateSelection() {\n    var gridCoords = gridGeometry_1.GridGeometry.calculateGridCellCoordsFromGridState({\n      clientX: clientX,\n      clientY: clientY\n    }, rootRef.current, gridState);\n    selection_1.updateSelection(props, gridState, gridCoords);\n  };\n\n  scrollingTimer_1.startScrollBySelectionDragIfNeeded(gridState, componentPixelCoord, recalculateAndUpdateSelection);\n  recalculateAndUpdateSelection();\n  return true;\n};\n\nexports.mouseUpOnGrid = function (props, gridState, editingCell) {\n  scrollingTimer_1.clearScrollByDragTimer();\n\n  if (editingCell !== null) {\n    // We're editing a cell, so ignore grid clicks\n    return;\n  }\n\n  selection_1.endSelection(props, gridState);\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar cursorState_1 = require(\"../cursorState\");\n\nvar gridGeometry_1 = require(\"../gridGeometry\");\n\nvar scrollingTimer_1 = require(\"./scrollingTimer\");\n\nvar selection_1 = require(\"./selection\");\n\nexports.leftClickOnFrozenCell = function (event, componentPixelCoord, rootRef, props, gridState) {\n  var clickInFrozenCols = componentPixelCoord.x < gridState.frozenColsWidth();\n  var clickInFrozenRows = componentPixelCoord.y < gridState.frozenRowsHeight();\n\n  if (!clickInFrozenCols && !clickInFrozenRows) {\n    return false;\n  }\n\n  if (clickInFrozenCols && clickInFrozenRows) {\n    selection_1.selectAll(props, gridState);\n  } else if (clickInFrozenCols) {\n    var coord = gridGeometry_1.GridGeometry.calculateGridCellCoordsFromGridState({\n      clientX: 0,\n      clientY: event.clientY\n    }, rootRef.current, gridState);\n    selection_1.selectOrUpdateRow(event, props, gridState, coord);\n  } else if (clickInFrozenRows) {\n    var coord = gridGeometry_1.GridGeometry.calculateGridCellCoordsFromGridState({\n      clientX: event.clientX,\n      clientY: 0\n    }, rootRef.current, gridState);\n    selection_1.selectOrUpdateCol(event, props, gridState, coord);\n  }\n\n  return true;\n};\n\nexports.leftClickDragOnFrozenCell = function (currentCursorState, event, componentPixelCoord, rootRef, props, gridState) {\n  if (!cursorState_1.hasSelectionFrozenState(currentCursorState)) {\n    return false;\n  }\n\n  var clickInFrozenCols = componentPixelCoord.x < gridState.frozenColsWidth();\n  var clickInFrozenRows = componentPixelCoord.y < gridState.frozenRowsHeight();\n\n  if (!clickInFrozenCols && !clickInFrozenRows) {\n    return false;\n  }\n\n  var clientX = event.clientX,\n      clientY = event.clientY;\n\n  var recalculateAndUpdateSelection = function recalculateAndUpdateSelection() {\n    if (clickInFrozenCols && clickInFrozenRows) {// Can't drag onto corner to select all, so ignore\n    } else if (clickInFrozenCols) {\n      var coord = gridGeometry_1.GridGeometry.calculateGridCellCoordsFromGridState({\n        clientX: 0,\n        clientY: clientY\n      }, rootRef.current, gridState);\n      selection_1.updateSelectionRow(props, gridState, coord);\n    } else if (clickInFrozenRows) {\n      var coord = gridGeometry_1.GridGeometry.calculateGridCellCoordsFromGridState({\n        clientX: clientX,\n        clientY: 0\n      }, rootRef.current, gridState);\n      selection_1.updateSelectionCol(props, gridState, coord);\n    }\n  };\n\n  if (cursorState_1.hasSelectionRowState(currentCursorState)) {\n    scrollingTimer_1.startScrollBySelectionDragIfNeeded(gridState, componentPixelCoord, recalculateAndUpdateSelection, {\n      suppressX: true\n    });\n  } else if (cursorState_1.hasSelectionColumnState(currentCursorState)) {\n    scrollingTimer_1.startScrollBySelectionDragIfNeeded(gridState, componentPixelCoord, recalculateAndUpdateSelection, {\n      suppressY: true\n    });\n  }\n\n  recalculateAndUpdateSelection();\n  return true;\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction numberBetween(num, min, max) {\n  return Math.max(Math.min(num, max), min);\n}\n\nexports.numberBetween = numberBetween;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction isLeftButton(event) {\n  // tslint:disable-next-line: no-bitwise\n  return (event.buttons & 1) === 1;\n}\n\nexports.isLeftButton = isLeftButton;","\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gridGeometry_1 = require(\"../gridGeometry\");\n\nvar ScrollbarGeometry = __importStar(require(\"../scrollbarGeometry\"));\n\nvar draggedScrollbar = null;\n\nexports.mouseDownOnScrollbar = function (coord, gridState) {\n  var hitScrollbar = ScrollbarGeometry.getHitScrollBar(coord, gridState.horizontalScrollbarPos(), gridState.verticalScrollbarPos());\n\n  if (hitScrollbar) {\n    draggedScrollbar = {\n      bar: hitScrollbar,\n      origScrollbarStart: hitScrollbar === 'x' ? gridState.horizontalScrollbarPos().extent.start : gridState.verticalScrollbarPos().extent.start,\n      origClick: hitScrollbar === 'x' ? coord.x : coord.y\n    };\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexports.mouseDragOnScrollbar = function (coord, gridState) {\n  if (!draggedScrollbar) {\n    return false;\n  }\n\n  var values = draggedScrollbar.bar === 'x' ? {\n    frozenLen: gridState.frozenColsWidth(),\n    canvasLen: gridState.canvasSize().width,\n    gridLen: gridState.gridSize().width,\n    barLen: gridState.horizontalScrollbarLength(),\n    clickCoord: coord.x\n  } : {\n    frozenLen: gridState.frozenRowsHeight(),\n    canvasLen: gridState.canvasSize().height,\n    gridLen: gridState.gridSize().height,\n    barLen: gridState.verticalScrollbarLength(),\n    clickCoord: coord.y\n  };\n  var dragDistance = values.clickCoord - draggedScrollbar.origClick;\n  var desiredStart = draggedScrollbar.origScrollbarStart + dragDistance;\n  var desiredFraction = ScrollbarGeometry.calculateFractionFromStartPos(desiredStart, values.frozenLen, values.canvasLen, values.barLen);\n  var newOffset = gridGeometry_1.GridGeometry.calculateGridOffsetFromFraction(desiredFraction, values.gridLen, values.canvasLen);\n\n  if (draggedScrollbar.bar === 'x') {\n    gridState.gridOffsetRaw({\n      x: newOffset,\n      y: gridState.gridOffset().y\n    });\n  } else {\n    gridState.gridOffsetRaw({\n      x: gridState.gridOffset().x,\n      y: newOffset\n    });\n  }\n\n  return true;\n};\n\nexports.mouseHoverOnScrollbar = function (coord, gridState) {\n  var hoveredScrollbar = ScrollbarGeometry.getHitScrollBar(coord, gridState.horizontalScrollbarPos(), gridState.verticalScrollbarPos());\n  gridState.hoveredScrollbar(hoveredScrollbar);\n};\n\nexports.mouseUpOnScrollbar = function () {\n  if (draggedScrollbar) {\n    draggedScrollbar = null;\n    return true;\n  } else {\n    return false;\n  }\n};","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar FrozenColsCanvas_1 = require(\"./FrozenColsCanvas\");\n\nvar FrozenCornerCanvas_1 = require(\"./FrozenCornerCanvas\");\n\nvar FrozenRowsCanvas_1 = require(\"./FrozenRowsCanvas\");\n\nvar FrozenCanvas =\n/** @class */\nfunction (_super) {\n  __extends(FrozenCanvas, _super);\n\n  function FrozenCanvas() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FrozenCanvas.prototype.render = function () {\n    return React.createElement(React.Fragment, null, this.props.frozenRowsHeight > 0 && this.props.frozenColsWidth > 0 && React.createElement(FrozenCornerCanvas_1.FrozenCornerCanvas, __assign({}, this.props)), this.props.frozenRowsHeight > 0 && React.createElement(FrozenRowsCanvas_1.FrozenRowsCanvas, __assign({}, this.props)), this.props.frozenColsWidth > 0 && React.createElement(FrozenColsCanvas_1.FrozenColsCanvas, __assign({}, this.props)));\n  };\n\n  return FrozenCanvas;\n}(React.Component);\n\nexports.FrozenCanvas = FrozenCanvas;","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar instigator_1 = require(\"instigator\");\n\nvar React = __importStar(require(\"react\"));\n\nvar GridCanvas_1 = require(\"./GridCanvas\");\n\nvar FrozenColsCanvas =\n/** @class */\nfunction (_super) {\n  __extends(FrozenColsCanvas, _super);\n\n  function FrozenColsCanvas(props) {\n    var _this = _super.call(this, props) || this;\n\n    var colsVisibleRect = instigator_1.transformer([props.gridState.visibleRect, props.gridState.frozenRowsHeight, props.gridState.horizontalGutterBounds], function (visibleRect, frozenRowsHeight, horizontalGutterBounds) {\n      var scrollGutterHeight = horizontalGutterBounds ? horizontalGutterBounds.height : 0;\n      return __assign({}, visibleRect, {\n        left: 0,\n        right: visibleRect.width,\n        top: visibleRect.top + frozenRowsHeight,\n        bottom: visibleRect.bottom - scrollGutterHeight,\n        height: visibleRect.height - frozenRowsHeight - scrollGutterHeight\n      });\n    });\n    _this.colsPosProps = instigator_1.transformer([colsVisibleRect], function (visibleRect) {\n      return {\n        gridOffset: {\n          x: visibleRect.left,\n          y: visibleRect.top\n        },\n        visibleRect: visibleRect\n      };\n    });\n    return _this;\n  }\n\n  FrozenColsCanvas.prototype.render = function () {\n    var horizontalGutterBounds = this.props.gridState.horizontalGutterBounds();\n    var scrollGutterHeight = horizontalGutterBounds ? horizontalGutterBounds.height : 0;\n\n    var props = __assign({}, this.props, {\n      top: this.props.frozenRowsHeight,\n      left: 0,\n      height: this.props.height - this.props.frozenRowsHeight - scrollGutterHeight,\n      width: this.props.frozenColsWidth,\n      posProps: this.colsPosProps\n    });\n\n    return React.createElement(GridCanvas_1.GridCanvas, __assign({}, props));\n  };\n\n  return FrozenColsCanvas;\n}(React.Component);\n\nexports.FrozenColsCanvas = FrozenColsCanvas;","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar shallow_equals_1 = __importDefault(require(\"shallow-equals\"));\n\nvar commonCanvasRenderer_1 = require(\"./commonCanvasRenderer\");\n\nvar defaultPosProps = {\n  gridOffset: {\n    x: 0,\n    y: 0\n  },\n  visibleRect: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    height: 0,\n    width: 0\n  }\n};\n\nvar GridCanvasRenderer =\n/** @class */\nfunction (_super) {\n  __extends(GridCanvasRenderer, _super);\n\n  function GridCanvasRenderer(canvas, canvasSize, basicProps, dpr) {\n    var _this = _super.call(this, canvas, dpr, false) || this;\n\n    _this.posProps = defaultPosProps;\n    _this.prevDraw = null;\n\n    _this.updateProps = function (canvas, canvasSize, basicProps, posProps) {\n      if (_this.canvas !== canvas) {\n        _this.setCanvas(canvas);\n      }\n\n      if (!shallow_equals_1.default(_this.canvasSize, canvasSize) || !shallow_equals_1.default(_this.basicProps, basicProps)) {\n        _this.prevDraw = null;\n      }\n\n      _this.canvasSize = canvasSize;\n      _this.basicProps = basicProps;\n      _this.posProps = posProps;\n\n      _this.drawScaled(_this.draw);\n    };\n\n    _this.draw = function () {\n      var prevDraw = _this.prevDraw;\n      var basicProps = _this.basicProps;\n      var posProps = _this.posProps;\n\n      if (prevDraw) {\n        // Translate according to difference from previous draw\n        var xDiff = prevDraw.gridOffset.x - posProps.gridOffset.x;\n        var yDiff = prevDraw.gridOffset.y - posProps.gridOffset.y;\n\n        _this.shiftExistingCanvas(xDiff, yDiff);\n\n        _this.drawNewBorderBackground(xDiff, yDiff, _this.canvasSize.width, _this.canvasSize.height);\n      } else {\n        _this.drawWholeBorderBackground(_this.canvasSize.width, _this.canvasSize.height);\n      } // Translate the canvas context so that it's covering the visibleRect\n\n\n      _this.translateToGridOffset(posProps.gridOffset); // Draw cells\n\n\n      var colIndex = 0;\n      var minRowIndex = Math.floor(posProps.visibleRect.top / (basicProps.rowHeight + basicProps.borderWidth));\n      var maxRowIndex = Math.min(Math.ceil(posProps.visibleRect.bottom / (basicProps.rowHeight + basicProps.borderWidth)), basicProps.gridInnerSize.height / (basicProps.rowHeight + basicProps.borderWidth));\n\n      for (var _i = 0, _a = basicProps.colBoundaries; _i < _a.length; _i++) {\n        var _b = _a[_i],\n            cellLeft = _b.left,\n            cellRight = _b.right;\n\n        if (cellRight < posProps.visibleRect.left) {\n          // Cell is off screen to left, so skip this column\n          colIndex++;\n          continue;\n        }\n\n        if (cellLeft > posProps.visibleRect.right) {\n          // Cell is off screen to right, so skip this and all future columns\n          break;\n        }\n\n        var col = basicProps.columns[colIndex];\n\n        for (var rowIndex = minRowIndex; rowIndex < maxRowIndex; rowIndex++) {\n          var row = basicProps.data[rowIndex];\n          var cell = row[col.fieldName];\n          var cellBounds = {\n            left: cellLeft,\n            top: rowIndex * (basicProps.rowHeight + basicProps.borderWidth),\n            right: cellLeft + col.width,\n            bottom: rowIndex * (basicProps.rowHeight + basicProps.borderWidth) + basicProps.rowHeight,\n            width: col.width,\n            height: basicProps.rowHeight\n          };\n\n          if (prevDraw && Math.max(cellLeft, posProps.visibleRect.left) >= prevDraw.rect.left && Math.min(cellRight, posProps.visibleRect.right) <= prevDraw.rect.right && Math.max(cellBounds.top, posProps.visibleRect.top) >= prevDraw.rect.top && Math.min(cellBounds.bottom, posProps.visibleRect.bottom) <= prevDraw.rect.bottom) {\n            // Visible portion of cell is entirely contained within previously drawn region, so we can skip\n            continue;\n          }\n\n          _this.drawCell(cell, cellBounds, {\n            column: col,\n            rowIndex: rowIndex,\n            colIndex: colIndex\n          });\n        }\n\n        colIndex++;\n      } // Translate back, to bring our drawn area into the bounds of the canvas element\n\n\n      _this.translateToOrigin(posProps.gridOffset); // Remember what area is now drawn\n\n\n      _this.prevDraw = {\n        gridOffset: posProps.gridOffset,\n        rect: {\n          left: Math.max(posProps.gridOffset.x, posProps.visibleRect.left),\n          top: Math.max(posProps.gridOffset.y, posProps.visibleRect.top),\n          right: Math.min(posProps.gridOffset.x + _this.canvasSize.width, posProps.visibleRect.right),\n          bottom: Math.min(posProps.gridOffset.y + _this.canvasSize.height, posProps.visibleRect.bottom)\n        }\n      };\n    };\n\n    _this.canvasSize = canvasSize;\n    _this.basicProps = basicProps;\n    return _this;\n  }\n\n  GridCanvasRenderer.prototype.translateToGridOffset = function (gridOffset) {\n    this.context.translate(-gridOffset.x, -gridOffset.y);\n  };\n\n  GridCanvasRenderer.prototype.translateToOrigin = function (gridOffset) {\n    this.context.translate(gridOffset.x, gridOffset.y);\n  };\n  /*\n   * Fill the entire canvas with the border colour\n   */\n\n\n  GridCanvasRenderer.prototype.drawWholeBorderBackground = function (propsWidth, propsHeight) {\n    // Draw base in border colour; cells will draw over this, leaving only the borders\n    this.context.fillStyle = commonCanvasRenderer_1.borderColour;\n    this.context.fillRect(0, 0, propsWidth, propsHeight);\n  };\n  /*\n   * Copy the current image on the canvas back onto the canvas, shifted by the given delta\n   */\n\n\n  GridCanvasRenderer.prototype.shiftExistingCanvas = function (xDiff, yDiff) {\n    this.context.drawImage(this.canvas, 0, 0, this.canvas.width * this.dpr, this.canvas.height * this.dpr, xDiff, yDiff, this.canvas.width, this.canvas.height);\n  };\n  /*\n   * Fill with the border colour along any areas of the canvas that are 'new', i.e. need repainting\n   * because they represent areas of the grid that have just become visible after a scroll\n   */\n\n\n  GridCanvasRenderer.prototype.drawNewBorderBackground = function (xDiff, yDiff, propsWidth, propsHeight) {\n    // Draw base in border colour in new areas; cells will draw over this, leaving only the borders\n    // (Note, we might fill a corner twice if scrolling diagnally, but the perf cost seems minimal)\n    this.context.fillStyle = commonCanvasRenderer_1.borderColour;\n\n    if (yDiff < 0) {\n      // Moved down - draw bottom\n      var top_1 = propsHeight + yDiff;\n      var height = -yDiff;\n      this.context.fillRect(0, top_1, propsWidth, height);\n    } else if (yDiff > 0) {\n      // Moved up - draw top\n      var top_2 = 0;\n      var height = yDiff;\n      this.context.fillRect(0, top_2, propsWidth, height);\n    }\n\n    if (xDiff < 0) {\n      // Moved right - draw right\n      var left = propsWidth + xDiff;\n      var width = -xDiff;\n      this.context.fillRect(left, 0, width, propsHeight);\n    } else if (xDiff > 0) {\n      // Moved left - draw left\n      var left = 0;\n      var width = xDiff;\n      this.context.fillRect(left, 0, width, propsHeight);\n    }\n  };\n\n  return GridCanvasRenderer;\n}(commonCanvasRenderer_1.CommonCanvasRenderer);\n\nexports.GridCanvasRenderer = GridCanvasRenderer;","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar instigator_1 = require(\"instigator\");\n\nvar React = __importStar(require(\"react\"));\n\nvar GridCanvas_1 = require(\"./GridCanvas\");\n\nvar FrozenCornerCanvas =\n/** @class */\nfunction (_super) {\n  __extends(FrozenCornerCanvas, _super);\n\n  function FrozenCornerCanvas(props) {\n    var _this = _super.call(this, props) || this;\n\n    var cornerVisibleRect = instigator_1.transformer([props.gridState.visibleRect], function (visibleRect) {\n      return __assign({}, visibleRect, {\n        top: 0,\n        left: 0,\n        right: visibleRect.width,\n        bottom: visibleRect.height\n      });\n    });\n    _this.cornerPosProps = instigator_1.transformer([cornerVisibleRect], function (visibleRect) {\n      return {\n        gridOffset: {\n          x: visibleRect.left,\n          y: visibleRect.top\n        },\n        visibleRect: visibleRect\n      };\n    });\n    return _this;\n  }\n\n  FrozenCornerCanvas.prototype.render = function () {\n    var props = __assign({}, this.props, {\n      top: 0,\n      left: 0,\n      height: this.props.frozenRowsHeight,\n      width: this.props.frozenColsWidth,\n      posProps: this.cornerPosProps\n    });\n\n    return React.createElement(GridCanvas_1.GridCanvas, __assign({}, props));\n  };\n\n  return FrozenCornerCanvas;\n}(React.Component);\n\nexports.FrozenCornerCanvas = FrozenCornerCanvas;","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar instigator_1 = require(\"instigator\");\n\nvar React = __importStar(require(\"react\"));\n\nvar GridCanvas_1 = require(\"./GridCanvas\");\n\nvar FrozenRowsCanvas =\n/** @class */\nfunction (_super) {\n  __extends(FrozenRowsCanvas, _super);\n\n  function FrozenRowsCanvas(props) {\n    var _this = _super.call(this, props) || this;\n\n    var rowsVisibleRect = instigator_1.transformer([props.gridState.visibleRect, props.gridState.frozenColsWidth, props.gridState.verticalGutterBounds], function (visibleRect, frozenColsWidth, verticalGutterBounds) {\n      var scrollGutterWidth = verticalGutterBounds ? verticalGutterBounds.width : 0;\n      return __assign({}, visibleRect, {\n        top: 0,\n        bottom: visibleRect.height,\n        left: visibleRect.left + frozenColsWidth,\n        right: visibleRect.right - scrollGutterWidth,\n        width: visibleRect.width - frozenColsWidth - scrollGutterWidth\n      });\n    });\n    _this.rowsPosProps = instigator_1.transformer([rowsVisibleRect], function (visibleRect) {\n      return {\n        gridOffset: {\n          x: visibleRect.left,\n          y: visibleRect.top\n        },\n        visibleRect: visibleRect\n      };\n    });\n    return _this;\n  }\n\n  FrozenRowsCanvas.prototype.render = function () {\n    var verticalGutterBounds = this.props.gridState.verticalGutterBounds();\n    var scrollGutterWidth = verticalGutterBounds ? verticalGutterBounds.width : 0;\n\n    var props = __assign({}, this.props, {\n      top: 0,\n      left: this.props.frozenColsWidth,\n      height: this.props.frozenRowsHeight,\n      width: this.props.width - this.props.frozenColsWidth - scrollGutterWidth,\n      posProps: this.rowsPosProps\n    });\n\n    return React.createElement(GridCanvas_1.GridCanvas, __assign({}, props));\n  };\n\n  return FrozenRowsCanvas;\n}(React.Component);\n\nexports.FrozenRowsCanvas = FrozenRowsCanvas;","\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar instigator_1 = require(\"instigator\");\n\nvar cursorState = __importStar(require(\"./cursorState\"));\n\nvar gridGeometry_1 = require(\"./gridGeometry\");\n\nvar ScrollbarGeometry = __importStar(require(\"./scrollbarGeometry\"));\n\nvar GridState =\n/** @class */\nfunction () {\n  function GridState(columns, data, rowHeight, borderWidth, frozenRows, frozenCols) {\n    this.columns = instigator_1.activeSource(columns);\n    this.data = instigator_1.activeSource(data);\n    this.rowHeight = instigator_1.activeSource(rowHeight);\n    this.borderWidth = instigator_1.activeSource(borderWidth);\n    this.frozenRows = instigator_1.activeSource(frozenRows);\n    this.frozenCols = instigator_1.activeSource(frozenCols);\n    this.dpr = instigator_1.activeSource(window.devicePixelRatio);\n    this.rootSize = instigator_1.activeSource(null);\n    this.gridOffsetRaw = instigator_1.activeSource({\n      x: 0,\n      y: 0\n    });\n    this.cursorState = instigator_1.activeSource(cursorState.createDefault());\n    this.hoveredScrollbar = instigator_1.activeSource(null);\n    this.gridOffset = instigator_1.transformer([this.gridOffsetRaw, this.dpr], gridGeometry_1.GridGeometry.quantiseGridOffset);\n    this.columnBoundaries = instigator_1.transformer([this.columns, this.borderWidth], gridGeometry_1.GridGeometry.calculateColumnBoundaries);\n    this.gridInnerSize = instigator_1.transformer([this.data, this.columnBoundaries, this.rowHeight, this.borderWidth], gridGeometry_1.GridGeometry.calculateGridSize);\n    this.gridSize = instigator_1.transformer([this.gridInnerSize, this.rootSize], gridGeometry_1.GridGeometry.calculateGridPlusGutterSize);\n    this.canvasSize = instigator_1.transformer([this.gridSize, this.rootSize], gridGeometry_1.GridGeometry.calculateCanvasSize);\n    this.visibleRect = instigator_1.transformer([this.gridOffset, this.canvasSize], gridGeometry_1.GridGeometry.calculateVisibleRect);\n    this.frozenColsWidth = instigator_1.transformer([this.columnBoundaries, this.frozenCols, this.borderWidth], gridGeometry_1.GridGeometry.calculateFrozenColsWidth);\n    this.frozenRowsHeight = instigator_1.transformer([this.rowHeight, this.borderWidth, this.frozenRows], gridGeometry_1.GridGeometry.calculateFrozenRowsHeight);\n    this.horizontalScrollbarLength = instigator_1.transformer([this.canvasSize, this.gridSize, this.frozenColsWidth], ScrollbarGeometry.getHorizontalScrollbarLength);\n    this.verticalScrollbarLength = instigator_1.transformer([this.canvasSize, this.gridSize, this.frozenRowsHeight], ScrollbarGeometry.getVerticalScrollbarLength);\n    this.horizontalScrollbarExtent = instigator_1.transformer([this.gridOffset, this.canvasSize, this.gridSize, this.horizontalScrollbarLength, this.frozenColsWidth], ScrollbarGeometry.getHorizontalScrollbarExtent);\n    this.verticalScrollbarExtent = instigator_1.transformer([this.gridOffset, this.canvasSize, this.gridSize, this.verticalScrollbarLength, this.frozenRowsHeight], ScrollbarGeometry.getVerticalScrollbarExtent);\n    this.horizontalScrollbarPos = instigator_1.transformer([this.horizontalScrollbarExtent, this.canvasSize, this.gridSize], ScrollbarGeometry.getHorizontalScrollbarPos);\n    this.verticalScrollbarPos = instigator_1.transformer([this.verticalScrollbarExtent, this.canvasSize, this.gridSize], ScrollbarGeometry.getVerticalScrollbarPos);\n    this.horizontalGutterBounds = instigator_1.transformer([this.canvasSize, this.gridInnerSize], ScrollbarGeometry.getHorizontalGutterBounds);\n    this.verticalGutterBounds = instigator_1.transformer([this.canvasSize, this.gridInnerSize], ScrollbarGeometry.getVerticalGutterBounds);\n  }\n\n  return GridState;\n}();\n\nexports.GridState = GridState;","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar instigator_1 = require(\"instigator\");\n\nvar React = __importStar(require(\"react\"));\n\nvar highlightCanvasRenderer_1 = require(\"./highlightCanvasRenderer\");\n\nvar HighlightCanvas =\n/** @class */\nfunction (_super) {\n  __extends(HighlightCanvas, _super);\n\n  function HighlightCanvas(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.canvasRef = React.createRef();\n    _this.renderer = null;\n    _this.renderCallback = null;\n    return _this;\n  }\n\n  HighlightCanvas.prototype.render = function () {\n    return React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      width: this.props.width * this.props.gridState.dpr(),\n      height: this.props.height * this.props.gridState.dpr(),\n      style: {\n        position: 'absolute',\n        width: this.props.width + \"px\",\n        height: this.props.height + \"px\",\n        top: 0,\n        left: 0\n      }\n    });\n  };\n\n  HighlightCanvas.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (!this.canvasRef.current) {\n      throw new Error('canvasRef is null in componentDidMount - cannot create renderer');\n    }\n\n    var gridState = this.props.gridState;\n    var basicProps = instigator_1.transformer([gridState.data, gridState.columns, gridState.canvasSize, gridState.gridSize, gridState.gridInnerSize, gridState.frozenColsWidth, gridState.frozenRowsHeight, gridState.rowHeight, gridState.columnBoundaries, gridState.borderWidth, gridState.horizontalGutterBounds, gridState.verticalGutterBounds], function (data, columns, canvasSize, gridSize, gridInnerSize, frozenColsWidth, frozenRowsHeight, rowHeight, columnBoundaries, borderWidth, horizontalGutterBounds, verticalGutterBounds) {\n      return {\n        data: data,\n        columns: columns,\n        canvasSize: canvasSize,\n        gridSize: gridSize,\n        gridInnerSize: gridInnerSize,\n        frozenColsWidth: frozenColsWidth,\n        frozenRowsHeight: frozenRowsHeight,\n        rowHeight: rowHeight,\n        columnBoundaries: columnBoundaries,\n        borderWidth: borderWidth,\n        horizontalGutterBounds: horizontalGutterBounds,\n        verticalGutterBounds: verticalGutterBounds\n      };\n    });\n    var scrollProps = instigator_1.transformer([gridState.horizontalScrollbarPos, gridState.verticalScrollbarPos, gridState.hoveredScrollbar], function (horizontalScrollbarPos, verticalScrollbarPos, hoveredScrollbar) {\n      return {\n        horizontalScrollbarPos: horizontalScrollbarPos,\n        verticalScrollbarPos: verticalScrollbarPos,\n        hoveredScrollbar: hoveredScrollbar\n      };\n    });\n    var posProps = instigator_1.transformer([gridState.gridOffset, gridState.visibleRect], function (gridOffset, visibleRect) {\n      return {\n        gridOffset: gridOffset,\n        visibleRect: visibleRect\n      };\n    });\n    var selectionProps = instigator_1.transformer([gridState.cursorState], function (cursorState) {\n      return {\n        cursorState: cursorState\n      };\n    });\n    this.renderer = new highlightCanvasRenderer_1.HighlightCanvasRenderer(this.canvasRef.current, basicProps(), gridState.dpr());\n    this.renderCallback = instigator_1.consumer([basicProps, posProps, scrollProps, selectionProps], function (newBasicProps, newPosProps, newScrollProps, newSelectionProps) {\n      if (_this.renderer) {\n        if (!_this.canvasRef.current) {\n          throw new Error('canvasRef is null in componentDidMount - cannot create renderer');\n        }\n\n        _this.renderer.updateProps(_this.canvasRef.current, newBasicProps, newPosProps, newScrollProps, newSelectionProps);\n      }\n    });\n  };\n\n  HighlightCanvas.prototype.componentWillUnmount = function () {\n    if (this.renderCallback) {\n      this.renderCallback.deregister();\n    }\n  };\n\n  return HighlightCanvas;\n}(React.Component);\n\nexports.HighlightCanvas = HighlightCanvas;","\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nexports.InlineTextEditor = function (props) {\n  var defaultText = props.cell.editor.serialise(props.cell.data);\n\n  var submit = function submit(e) {\n    var inputValue = e.currentTarget.value;\n    var newData = props.cell.editor.deserialise(inputValue, props.cell.data);\n    props.onSubmit(newData);\n  };\n\n  var handleKeyPress = function handleKeyPress(e) {\n    if (e.key === 'Enter') {\n      submit(e);\n    }\n  };\n\n  var handleKeyUp = function handleKeyUp(e) {\n    if (e.keyCode === 27) {\n      props.onCancel();\n    }\n  };\n\n  return React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      position: 'absolute',\n      boxSizing: 'border-box',\n      top: props.top - props.gridOffset.y + \"px\",\n      left: props.left - props.gridOffset.x + \"px\",\n      width: props.width + \"px\",\n      height: props.height + \"px\",\n      border: '0'\n    },\n    autoFocus: true,\n    defaultValue: defaultText,\n    onBlur: submit,\n    onKeyPress: handleKeyPress,\n    onKeyUp: handleKeyUp\n  });\n};","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar instigator_1 = require(\"instigator\");\n\nvar React = __importStar(require(\"react\"));\n\nvar GridCanvas_1 = require(\"./GridCanvas\");\n\nvar MainCanvas =\n/** @class */\nfunction (_super) {\n  __extends(MainCanvas, _super);\n\n  function MainCanvas(props) {\n    var _this = _super.call(this, props) || this;\n\n    var mainVisibleRect = instigator_1.transformer([props.gridState.visibleRect, props.gridState.frozenRowsHeight, props.gridState.frozenColsWidth], function (visibleRect, frozenRowsHeight, frozenColsWidth) {\n      return __assign({}, visibleRect, {\n        top: visibleRect.top + frozenRowsHeight,\n        left: visibleRect.left + frozenColsWidth,\n        height: visibleRect.height - frozenRowsHeight,\n        width: visibleRect.width - frozenColsWidth\n      });\n    });\n    _this.posProps = instigator_1.transformer([mainVisibleRect], function (visibleRect) {\n      return {\n        gridOffset: {\n          x: visibleRect.left,\n          y: visibleRect.top\n        },\n        visibleRect: visibleRect\n      };\n    });\n    return _this;\n  }\n\n  MainCanvas.prototype.render = function () {\n    var props = __assign({}, this.props, {\n      top: this.props.frozenRowsHeight,\n      left: this.props.frozenColsWidth,\n      height: this.props.height - this.props.frozenRowsHeight,\n      width: this.props.width - this.props.frozenColsWidth,\n      posProps: this.posProps\n    });\n\n    return React.createElement(GridCanvas_1.GridCanvas, __assign({}, props));\n  };\n\n  return MainCanvas;\n}(React.Component);\n\nexports.MainCanvas = MainCanvas;","import * as React from 'react';\nimport './FixedSizeHolder.css';\n\nexport const FixedSizeHolder = (props: {children?: React.ReactNode}) => {\n    return (\n        <div className=\"fixed-size-holder\">\n            {props.children}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport './PaddedPage.css';\n\nconst PaddedPage = (props: { children?: React.ReactNode }) => {\n    return (\n        <div className=\"padded-page\">\n            {props.children}\n        </div>\n    );\n};\n\nexport default PaddedPage;\n","import { CellDef, ColumnDef, DataRow } from '../../../src/types';\n\nexport function createFakeDataAndColumns<T>(\n    numRows: number,\n    numCols: number,\n    dataGen: (x: number, y: number) => T,\n    options: Partial<CellDef<T>> = {},\n) {\n    return {\n        columns: createFakeColumns(numCols),\n        rows: createFakeData(numRows, numCols, dataGen, options),\n    };\n}\n\nexport function createFakeColumns(numCols: number) {\n    const cols: ColumnDef[] = [];\n    for (let i = 0; i < numCols; i++) {\n        cols.push({\n            fieldName: `col-${i}`,\n            width: 50,\n        });\n    }\n    return cols;\n}\n\nexport function createFakeData<T>(\n    numRows: number,\n    numCols: number,\n    dataGen: (x: number, y: number) => T,\n    options: Partial<CellDef<T>> = {},\n) {\n    const rows: Array<DataRow<T>> = [];\n    for (let i = 0; i < numRows; i++) {\n        const row: DataRow<T> = {};\n        for (let j = 0; j < numCols; j++) {\n            row[`col-${j}`] = {\n                getText: () => `${i + 1}x${j + 1}`,\n                data: dataGen(j, i),\n                ...options,\n            };\n        }\n        rows.push(row);\n    }\n    return rows;\n}\n","import * as React from 'react';\nimport { ReactCanvasGrid } from 'react-canvas-grid';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeDataAndColumns } from '../data/dataAndColumns';\n\nconst renderBackgroundLightGreen = (context: CanvasRenderingContext2D, cellBounds: ClientRect) => {\n    context.fillStyle = 'lightgreen';\n    context.fillRect(cellBounds.left, cellBounds.top, cellBounds.width, cellBounds.height);\n};\n\nexport const CustomBackgroundGrid = () => {\n    const options = { renderBackground: renderBackgroundLightGreen };\n    const { columns, rows: data } = createFakeDataAndColumns(100, 20, () => {/* no op */}, options);\n\n    return (\n        <PaddedPage>\n            <h1>Custom Background Renderer</h1>\n            <p>\n                When specifying a cell definition, you can provide a <code>renderBackground</code> function\n                to customise drawing the cell's background.\n            </p>\n            <p>\n                Here, all cells use the same background renderer in order to draw the background as\n                light green.\n            </p>\n            <FixedSizeHolder>\n                <ReactCanvasGrid<void>\n                    columns={columns}\n                    data={data}\n                    rowHeight={20}\n                />\n            </FixedSizeHolder>\n        </PaddedPage>\n    );\n};\n","import * as React from 'react';\nimport { CellDef, cellHasTextFunction, ReactCanvasGrid } from 'react-canvas-grid';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeDataAndColumns } from '../data/dataAndColumns';\n\nconst renderTextRed = (context: CanvasRenderingContext2D, cellBounds: ClientRect, cell: CellDef<void>) => {\n    context.fillStyle = 'red';\n    const text = cellHasTextFunction(cell) ? cell.getText(cell.data) : cell.text;\n    context.fillText(text, cellBounds.left + 2, cellBounds.top + 15, cellBounds.width - 4);\n};\n\nexport const CustomTextGrid = () => {\n    const options = { renderText: renderTextRed };\n    const { columns, rows: data } = createFakeDataAndColumns(100, 20, () => {/* no op */}, options);\n\n    return (\n        <PaddedPage>\n            <h1>Custom Text Renderer</h1>\n            <p>\n                When specifying a cell definition, you can provide a <code>renderText</code> function\n                to customise drawing the cell's text.\n            </p>\n            <p>\n                Here, all cells use the same text renderer in order to draw the text as red.\n            </p>\n            <FixedSizeHolder>\n                <ReactCanvasGrid<void>\n                    columns={columns}\n                    data={data}\n                    rowHeight={20}\n                />\n            </FixedSizeHolder>\n        </PaddedPage>\n    );\n};\n","import * as React from 'react';\nimport './ControlsForm.css';\n\nexport const ControlsForm = (props: { children?: React.ReactNode }) => {\n    return (\n        <form className=\"controls\">\n            {props.children}\n        </form>\n    );\n};\n\nexport const InlineGroup = (props: { children?: React.ReactNode }) => {\n    return (\n        <span className=\"inline-controls-group\">\n            {props.children}\n        </span>\n    );\n};\n\nexport const NumberInput = (props: Partial<React.InputHTMLAttributes<HTMLInputElement>>) =>\n    <input type=\"number\" {...props} />;\n","import * as React from 'react';\nimport { ColumnDef, DataRow, ReactCanvasGrid } from 'react-canvas-grid';\nimport { ControlsForm, InlineGroup, NumberInput } from '../components/ControlsForm';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeDataAndColumns } from '../data/dataAndColumns';\n\ninterface DynamicDataGridState {\n    columns: ColumnDef[];\n    data: Array<DataRow<void>>;\n    numCols: number;\n    numRows: number;\n}\n\nexport class DynamicDataGrid extends React.Component<{}, DynamicDataGridState> {\n    private changeColsDebounceTimeout: number | null = null;\n    private changeRowsDebounceTimeout: number | null = null;\n\n    constructor(props: {}) {\n        super(props);\n\n        this.state = getDefaultState();\n    }\n\n    public render() {\n        return (\n            <PaddedPage>\n                <h1>Dynamic Data</h1>\n                <p>\n                    Updates to the <code>columns</code> and <code>data</code> props cause the grid to\n                    re-render with new values.\n                </p>\n                <p>\n                    The selected cells are cleared if <code>columns</code> changes or the number of rows\n                    (in <code>data</code>) changes. The selection is not cleared, however, if <code>columns</code>\n                    &#160;stays the same and <code>data</code> is replaced with an array of the same length (even if the\n                    contents within the array is different). I.e. if the <em>structure</em> of the grid has changed\n                    then the selection is cleared, but if only the <em>contents</em> change then the selection is\n                    retained.\n                </p>\n                <p>\n                    The scroll position is maintained as long as it is valid in the newly rendered grid. If not\n                    (because there are fewer columns or rows) the scroll position is truncated.\n                </p>\n\n                <ControlsForm>\n                    <div>\n                        <InlineGroup>\n                            <label>Number of rows: </label>\n                            <NumberInput\n                                id=\"num-rows\"\n                                onChange={this.changeNumRows}\n                                defaultValue={this.state.numRows as any}\n                            />\n                        </InlineGroup>\n                        <InlineGroup>\n                            <label>Number of columns: </label>\n                            <NumberInput\n                                id=\"num-cols\"\n                                onChange={this.changeNumCols}\n                                defaultValue={this.state.numCols as any}\n                            />\n                        </InlineGroup>\n                    </div>\n                    <div>\n                        <InlineGroup>\n                            <button id=\"first-col-to-end\" onClick={this.moveFirstColumnToEnd}>\n                                Move first column to end\n                            </button>\n                        </InlineGroup>\n                        <InlineGroup>\n                            <button id=\"modify-top-left\" onClick={this.modifyTopLeftCell}>\n                                Modify top left cell\n                            </button>\n                        </InlineGroup>\n                        <InlineGroup>\n                            <button id=\"reset\" onClick={this.reset}>Reset</button>\n                        </InlineGroup>\n                    </div>\n                </ControlsForm>\n\n                <FixedSizeHolder>\n                    <ReactCanvasGrid<void>\n                        columns={this.state.columns}\n                        data={this.state.data}\n                        rowHeight={20}\n                    />\n                </FixedSizeHolder>\n            </PaddedPage>\n        );\n    }\n\n    private changeNumRows = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (this.changeRowsDebounceTimeout) {\n            clearTimeout(this.changeRowsDebounceTimeout);\n        }\n        const numRows = event.target.valueAsNumber;\n        this.changeRowsDebounceTimeout = setTimeout(this.changeNumRowsDebounced, 80, numRows);\n    }\n\n    private changeNumRowsDebounced = (numRows: number) => {\n        this.changeRowsDebounceTimeout = null;\n        const { columns, rows: data } = createFakeDataAndColumns(numRows, this.state.numCols, () => {/* no op */});\n\n        this.setState({ columns, data, numRows });\n    }\n\n    private changeNumCols = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (this.changeColsDebounceTimeout) {\n            clearTimeout(this.changeColsDebounceTimeout);\n        }\n        const numCols = event.target.valueAsNumber;\n        this.changeColsDebounceTimeout = setTimeout(this.changeNumColsDebounced, 80, numCols);\n    }\n\n    private changeNumColsDebounced = (numCols: number) => {\n        this.changeColsDebounceTimeout = null;\n        const { columns, rows: data } = createFakeDataAndColumns(this.state.numRows, numCols, () => {/* no op */});\n\n        this.setState({ columns, data, numCols });\n    }\n\n    private moveFirstColumnToEnd = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) =>  {\n        this.setState({\n            columns: [...this.state.columns.slice(1), this.state.columns[0]],\n        });\n        event.preventDefault();\n    }\n\n    private modifyTopLeftCell = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) =>  {\n        const firstColName = this.state.columns[0].fieldName;\n        this.setState({\n            data: [\n                {\n                    ...this.state.data[0],\n                    [firstColName]: {\n                        ...this.state.data[0][firstColName],\n                        getText: () => 'Modified',\n                    },\n                },\n                ...this.state.data.slice(1),\n            ],\n        });\n        event.preventDefault();\n    }\n\n    private reset = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        this.setState(getDefaultState());\n        event.preventDefault();\n    }\n}\n\nconst getDefaultState = () => {\n    const { columns, rows: data } = createFakeDataAndColumns(20, 100, () => {/* no op */});\n\n    return {\n        columns,\n        data,\n        numCols: 100,\n        numRows: 20,\n    };\n};\n","import * as React from 'react';\nimport { CellDataChangeEvent, CellDef, DataRow, ReactCanvasGrid } from 'react-canvas-grid';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeColumns, createFakeData } from '../data/dataAndColumns';\n\ntype NumPair = [number, number];\n\ninterface EditableDataGridState {\n    data: Array<DataRow<NumPair>>;\n}\n\nexport class EditableDataGrid extends React.Component<{}, EditableDataGridState> {\n    constructor(props: {}) {\n        super(props);\n\n        const options: Partial<CellDef<NumPair>> = {\n            editor: {\n                serialise: ([a, b]: NumPair) => `${a},${b}`,\n                deserialise: (text: string, prev: NumPair) => {\n                    const match = text.match(/(\\d+),(\\d+)/);\n                    if (match) {\n                        return [parseInt(match[1], 10), parseInt(match[2], 10)];\n                    } else {\n                        return prev;\n                    }\n                },\n            },\n            getText: ([a, b]: NumPair) => `${a}x${b}`,\n        };\n\n        this.state = {\n            data: createFakeData(100, 200, (x, y) => [x, y] as NumPair, options),\n        };\n    }\n\n    public render() {\n        const columns = createFakeColumns(20);\n\n        return (\n            <PaddedPage>\n                <h1>Editable Data</h1>\n                <p>\n                    A cell is editable if its definition includes an <code>editor</code> property.\n                    If the grid also has a <code>onCellDataChanged</code> prop, that can persist\n                    changes made to data to be shown on the grid.\n                </p>\n                <p>\n                    The <code>editor</code> provides two functions, <code>serialise</code> and\n                    &#160;<code>deserialise</code>, that translate between the <code>data</code> stored\n                    on the cell definition and the text displayed in the editor <code>input</code>.\n                </p>\n                <p>\n                    Displaying the inline editor is not enough, however, as react-canvas-grid does not\n                    manage the data; instead, when data changes, it will call the function provided as\n                    the <code>onCellDataChanged</code> prop. This function can then update the contents\n                    of the <code>data</code> prop, causing the grid to render the changes.\n                </p>\n                <p>\n                    Note that the text displayed in the editor need not be the same as the text\n                    displayed in the cell itself (as defined by <code>text</code> or <code>getText</code>).\n                    In this example, the editor text is of the form <code>A,B</code> (i.e. comma separated),\n                    but cells are displayed as <code>AxB</code> (i.e. with an x).\n                </p>\n                <p>\n                    To edit a cell, double click it. Invalid values will be ignored.\n                </p>\n                <FixedSizeHolder>\n                    <ReactCanvasGrid<NumPair>\n                        columns={columns}\n                        data={this.state.data}\n                        rowHeight={20}\n                        onCellDataChanged={this.onCellDataChanged}\n                    />\n                </FixedSizeHolder>\n            </PaddedPage>\n        );\n    }\n\n    private onCellDataChanged = (event: CellDataChangeEvent<NumPair>) => {\n        this.setState({\n            data: this.state.data.map((row, i) => {\n                if (i === event.rowIndex) {\n                    return {\n                        ...row,\n                        [event.fieldName]: {\n                            ...row[event.fieldName],\n                            data: event.newData,\n                        },\n                    };\n                } else {\n                    return row;\n                }\n            }),\n        });\n    }\n}\n","import * as React from 'react';\nimport './EventLog.css';\n\ninterface EventLogProps {\n    log: string;\n}\n\nexport class EventLog extends React.PureComponent<EventLogProps> {\n    private logRef: React.RefObject<HTMLTextAreaElement>;\n\n    constructor(props: EventLogProps) {\n        super(props);\n        this.logRef = React.createRef();\n    }\n\n    public render() {\n        return (<textarea ref={this.logRef} className=\"event-log\" value={this.props.log} readOnly />);\n    }\n\n    public componentDidUpdate() {\n        if (this.logRef.current) {\n            this.logRef.current.scrollTop = this.logRef.current.scrollHeight;\n        }\n    }\n}\n","import * as React from 'react';\nimport { CellDataChangeEvent, CellDef, ReactCanvasGrid } from 'react-canvas-grid';\nimport { Link } from 'react-router-dom';\nimport { EventLog } from '../components/EventLog';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeDataAndColumns } from '../data/dataAndColumns';\n\ninterface EditEventsState {\n    eventLog: string;\n}\n\nconst options: Partial<CellDef<string>> = {\n    editor: {\n        serialise: (value: string) => value,\n        deserialise: (text: string, _: string) => text,\n    },\n    getText: (value: string) => value,\n};\nconst { columns, rows: data } = createFakeDataAndColumns(100, 20, (x, y) => `${x},${y}`, options);\n\nexport class EditEventsGrid extends React.Component<{}, EditEventsState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            eventLog: '',\n        };\n    }\n\n    public render() {\n        return (\n            <PaddedPage>\n                <h1>Edit Events</h1>\n                <p>\n                    The callback <code>onCellDataChanged</code> allow consumers of react-canvas-grid to\n                    respond to the user making changes to the data. Typically, this is used to update the\n                    data passed to the grid in the <code>data</code> prop. Without doing so, the grid's\n                    data will not be changed. See the <Link to=\"/editable\">Editable Data</Link> example\n                    for further detail. This example does not update the data, but merely logs event.\n                </p>\n                <p>\n                    Note that the callback is fired when the user hits enter on the inline editor, or when\n                    the inline editor loses focus, regardless of whether the data has been changed. The\n                    inline editor can be dismissed with the escape key, regardless of whether the data has\n                    been changed.\n                </p>\n                <FixedSizeHolder>\n                    <ReactCanvasGrid<string>\n                        columns={columns}\n                        data={data}\n                        rowHeight={20}\n                        onCellDataChanged={this.onCellDataChanged}\n                    />\n                </FixedSizeHolder>\n                <EventLog log={this.state.eventLog} />\n            </PaddedPage>\n        );\n    }\n\n    private onCellDataChanged = (event: CellDataChangeEvent<string>) => {\n        const { colIndex, rowIndex, fieldName, newData } = event;\n\n        this.setState({\n            eventLog: this.state.eventLog +\n                `changed: row ${rowIndex} of column \"${fieldName}\" (index ${colIndex}) to ${newData}\\n`,\n        });\n    }\n}\n","import React, { Component } from 'react';\nimport {\n  CellDataChangeEvent, CellDef, ColumnDef, DataRow, getCellText, ReactCanvasGrid, SelectRange,\n} from 'react-canvas-grid';\nimport './Everything.css';\n\nconst numColsLarge = 250;\nconst numColsSmall = 3;\nconst numRows = 250;\n\nconst labels = [\n  {text: 'Lorem', colour: 'red'},\n  {text: 'Ipsum', colour: 'orange'},\n  {text: 'Dolor', colour: 'lightblue'},\n  {text: 'Sit', colour: 'lightgreen'},\n  {text: 'Amet', colour: 'lightpink'},\n];\n\ntype HighlightPosition = 'topleft' | 'bottomright' | 'full' | 'none';\nconst highlights: HighlightPosition[] = [\n  'topleft',\n  'bottomright',\n  'full',\n  'none', 'none', 'none', 'none', 'none', 'none', // Hacky way to make 'none' more likely\n];\n\nconst renderHeaderBackground = (context: CanvasRenderingContext2D, cellBounds: ClientRect) => {\n  context.fillStyle = '#eee';\n  context.fillRect(cellBounds.left, cellBounds.top, cellBounds.width, cellBounds.height);\n};\n\nconst renderCellBackground = (\n  context: CanvasRenderingContext2D,\n  cellBounds: ClientRect,\n  cell: CustomBgCellDef,\n) => {\n  if (cell.data.highlight !== 'full') {\n    context.fillStyle = cell.data.bgColour;\n    context.fillRect(cellBounds.left, cellBounds.top, cellBounds.width, cellBounds.height);\n  }\n\n  if (cell.data.highlight !== 'none') {\n    context.fillStyle = 'yellow';\n    if (cell.data.highlight === 'full') {\n      context.fillRect(cellBounds.left, cellBounds.top, cellBounds.width, cellBounds.height);\n    } else if (cell.data.highlight === 'topleft') {\n      context.beginPath();\n      context.moveTo(cellBounds.left, cellBounds.top);\n      context.lineTo(cellBounds.left, cellBounds.bottom);\n      context.lineTo(cellBounds.right, cellBounds.top);\n      context.closePath();\n      context.fill();\n    } else if (cell.data.highlight === 'bottomright') {\n      context.beginPath();\n      context.moveTo(cellBounds.left, cellBounds.bottom);\n      context.lineTo(cellBounds.right, cellBounds.bottom);\n      context.lineTo(cellBounds.right, cellBounds.top);\n      context.closePath();\n      context.fill();\n    }\n  }\n};\n\ninterface CustomCellData {\n  bgColour: string;\n  text: string;\n  shouldReverseText: boolean;\n  highlight: HighlightPosition;\n}\n\ntype CustomBgCellDef = CellDef<CustomCellData>;\n\ntype AllCellDataTypes = CustomCellData | null;\n\nfunction getCustomCellText(data: CustomCellData) {\n  if (data.shouldReverseText) {\n    return data.text.split('').reverse().join('');\n  } else {\n    return data.text;\n  }\n}\n\nfunction serailiseCustomData(data: CustomCellData): string {\n  return (data.shouldReverseText ? '!' : '') + data.text;\n}\n\nfunction deserialiseCustomData(value: string, oldData: CustomCellData): CustomCellData {\n  const reversed = value.startsWith('!');\n  const text = reversed ? value.slice(1) : value;\n  return {\n    ...oldData,\n    shouldReverseText: reversed,\n    text,\n  };\n}\n\nfunction createCols(numCols: number) {\n  const colDefs: ColumnDef[] = [\n    {\n      fieldName: 'date',\n      width: 80,\n    },\n  ];\n  for (let i = 0; i < numCols; i++) {\n    colDefs.push({\n      fieldName: i.toString(),\n      width: 100,\n    });\n  }\n  return colDefs;\n}\n\nfunction createData(numCols: number) {\n  const data: Array<DataRow<AllCellDataTypes>> = [];\n\n  for (let i = 0; i < numRows; i++) {\n    const row: DataRow<AllCellDataTypes> = {\n      date: {\n        text: (i + 1).toString(),\n        data: null,\n        renderBackground: renderHeaderBackground,\n      },\n    };\n    for (let j = 0; j < numCols; j++) {\n      const label = labels[Math.floor(Math.random() * labels.length)];\n      const highlight = highlights[Math.floor(Math.random() * highlights.length)];\n      if (i === 0) {\n        const cell: CustomBgCellDef = {\n          getText: getCustomCellText,\n          data: { bgColour: label.colour, highlight, text: label.text, shouldReverseText: Math.random() < 0.5 },\n          renderBackground: renderHeaderBackground,\n        };\n        row[j.toString()] = cell as CellDef<AllCellDataTypes>;\n      } else {\n        const cell: CustomBgCellDef = {\n          getText: getCustomCellText,\n          data: { bgColour: label.colour, highlight, text: label.text, shouldReverseText: Math.random() < 0.5 },\n          renderBackground: renderCellBackground,\n          editor: {\n            serialise: serailiseCustomData,\n            deserialise: deserialiseCustomData,\n          },\n        };\n        row[j.toString()] = cell as CellDef<AllCellDataTypes>;\n      }\n    }\n    data.push(row);\n  }\n  return data;\n}\n\ninterface EverythingState {\n  colDefs: ColumnDef[];\n  data: Array<DataRow<AllCellDataTypes>>;\n  selectedRange: SelectRange | null;\n  isDragging: boolean;\n  focusedCol: number | null;\n  lastKeyPress: string | null;\n}\n\nexport class Everything extends Component<{}, EverythingState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      colDefs: createCols(numColsLarge),\n      data: createData(numColsLarge),\n      selectedRange: null,\n      isDragging: false,\n      focusedCol: null,\n      lastKeyPress: null,\n    };\n  }\n\n  public render() {\n    const colHeaders = this.state.colDefs.map((cd) => {\n      const headerRow = this.state.data[0];\n      const headerCell = headerRow[cd.fieldName];\n      const text = getCellText(headerCell);\n      return text;\n    });\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <p>\n              Page header\n            </p>\n            <div>\n              {this.state.isDragging ? 'Dragging' : ''}\n              &nbsp;\n              {this.state.selectedRange ? JSON.stringify(this.state.selectedRange) : ''}\n            </div>\n            <div>{this.state.lastKeyPress}</div>\n            <button onClick={this.replaceDataLarge}>Replace data (Large)</button>\n            <button onClick={this.replaceDataSmall}>Replace data (Small)</button>\n            <button onClick={this.updateCell}>Update cell</button>\n            <label>Focus column:</label>\n            <select onChange={this.focusColumn} defaultValue={'none'}>\n              <option value={'none'}>None</option>\n              {colHeaders.map((text, i) => (\n                <option key={i} value={i}>{i} ({text})</option>\n              ))}\n            </select>\n          </header>\n          <div style={{height: '600px', width: '800px', overflow: 'scroll'}}>\n            <div style={{height: '80px', backgroundColor: 'blue'}}>\n              <span>Body header</span>\n            </div>\n            <div\n              style={{paddingLeft: '100px', paddingRight: '100px', backgroundColor: 'purple'}}\n              onKeyPress={this.onKeyPressed}\n            >\n              <ReactCanvasGrid<AllCellDataTypes>\n                cssHeight={'800px'}\n                cssWidth={'800px'}\n                columns={this.state.colDefs}\n                data={this.state.data}\n                rowHeight={20}\n                frozenRows={1}\n                frozenCols={1}\n                onSelectionChangeStart={this.selectionChanged}\n                onSelectionChangeUpdate={this.selectionChanged}\n                onSelectionChangeEnd={this.selectionFinished}\n                onSelectionCleared={this.selectionCleared}\n                onCellDataChanged={this.onCellDataChanged}\n                focusedColIndex={this.state.focusedCol}\n              />\n            </div>\n            <div style={{height: '80px', backgroundColor: 'red'}}>\n              <span>Body footer</span>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  private selectionChanged = (selectedRange: SelectRange | null) => {\n    this.setState({ selectedRange, isDragging: true });\n  }\n\n  private selectionFinished = (selectedRange: SelectRange | null) => {\n    this.setState({ selectedRange, isDragging: false });\n  }\n\n  private selectionCleared = () => {\n    this.setState({ selectedRange: null, isDragging: false });\n  }\n\n  private focusColumn = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (event.target.value === 'none') {\n      this.setState({ focusedCol: null });\n    } else {\n      this.setState({ focusedCol: parseInt(event.target.value, 10) });\n    }\n  }\n\n  private replaceDataLarge = () => {\n    this.setState({\n      colDefs: createCols(numColsLarge),\n      data: createData(numColsLarge),\n    });\n  }\n\n  private replaceDataSmall = () => {\n    this.setState({\n      colDefs: createCols(numColsSmall),\n      data: createData(numColsSmall),\n    });\n  }\n\n  private updateCell = () => {\n    this.setState({\n      data: this.state.data.map((row, i) => {\n        if (i === 0) {\n          const label = labels[Math.floor(Math.random() * labels.length)];\n          const highlight = highlights[Math.floor(Math.random() * highlights.length)];\n          return {\n            ...row,\n            0: {\n              ...row[0],\n              data: {\n                ...row[0].data,\n                bgColour: label.colour,\n                highlight,\n                text: label.text,\n                shouldReverseText: Math.random() < 0.5,\n              },\n            },\n          };\n        } else {\n          return row;\n        }\n      }),\n    });\n  }\n\n  private onCellDataChanged = (event: CellDataChangeEvent<AllCellDataTypes>) => {\n    this.setState({\n      data: this.state.data.map((row, i) => {\n        if (i === event.rowIndex) {\n          return {\n            ...row,\n            [event.fieldName]: {\n              ...row[event.fieldName],\n              data: event.newData,\n            },\n          };\n        } else {\n          return row;\n        }\n      }),\n    });\n  }\n\n  private onKeyPressed = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    this.setState({\n      lastKeyPress: event.key,\n    });\n  }\n}\n","import * as React from 'react';\nimport { ReactCanvasGrid } from 'react-canvas-grid';\nimport { ControlsForm } from '../components/ControlsForm';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeDataAndColumns } from '../data/dataAndColumns';\n\ninterface FocusColumnGridState {\n    focusedCol: number | null;\n    freezeCols: boolean;\n}\n\nexport class FocusColumnGrid extends React.Component<{}, FocusColumnGridState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            focusedCol: null,\n            freezeCols: false,\n        };\n    }\n\n    public render() {\n        const { columns, rows: data } = createFakeDataAndColumns(20, 100, () => {/* no op */});\n\n        return (\n            <PaddedPage>\n                <h1>Focused Columns</h1>\n                <p>\n                    Updates to the <code>focusedColIndex</code> cause the grid to automatically scroll\n                    to ensure the indicated column is displayed. The scrolling behaviour is aware of\n                    frozen columns.\n                </p>\n                <p>\n                    This can be useful for building a 'search' feature.\n                </p>\n\n                <ControlsForm>\n                    <div>\n                        <label>Select a column to focus: </label>\n                        <select onChange={this.focusColumn} defaultValue={'none'}>\n                            <option value={'none'}>None</option>\n                            {columns.map((_, i) => (\n                                <option key={i} value={i}>{i + 1}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div>\n                        <label htmlFor=\"toggle-frozen-cols\">Select to freeze columns 1 &amp; 2: </label>\n                        <input id=\"toggle-frozen-cols\" type=\"checkbox\" onChange={this.toggleFrozenCols} />\n                    </div>\n                </ControlsForm>\n\n                <FixedSizeHolder>\n                    <ReactCanvasGrid<void>\n                        columns={columns}\n                        data={data}\n                        rowHeight={20}\n                        focusedColIndex={this.state.focusedCol}\n                        frozenCols={this.state.freezeCols ? 2 : 0}\n                    />\n                </FixedSizeHolder>\n            </PaddedPage>\n        );\n    }\n\n    private focusColumn = (event: React.ChangeEvent<HTMLSelectElement>) => {\n      if (event.target.value === 'none') {\n        this.setState({ focusedCol: null });\n      } else {\n        this.setState({ focusedCol: parseInt(event.target.value, 10) });\n      }\n    }\n\n    private toggleFrozenCols = () => {\n        this.setState({ freezeCols: !this.state.freezeCols });\n    }\n}\n","import * as React from 'react';\nimport { CellDef, ReactCanvasGrid } from 'react-canvas-grid';\nimport { Link } from 'react-router-dom';\nimport { EventLog } from '../components/EventLog';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeDataAndColumns } from '../data/dataAndColumns';\n\ninterface KeyboardEventsState {\n    eventLog: string;\n}\n\nconst options: Partial<CellDef<string>> = {\n    editor: {\n        serialise: (value: string) => value,\n        deserialise: (text: string, _: string) => text,\n    },\n    getText: (value: string) => value,\n};\nconst { columns, rows: data } = createFakeDataAndColumns(100, 20, (x, y) => `${x},${y}`, options);\n\nexport class KeyboardEventsGrid extends React.Component<{}, KeyboardEventsState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            eventLog: '',\n        };\n    }\n\n    public render() {\n        return (\n            <PaddedPage>\n                <h1>Keyboard Events</h1>\n                <p>\n                    Keyboard events bubble up, so can be captured the parent element of the grid (when\n                    the grid has focus).\n                </p>\n                <p>\n                    Note that keyboard events will also bubble up when the user interacts with the\n                    inline editor, which you may wish to ignore. To do so, you may wish to observe\n                    the grid's edit events.\n                </p>\n                <p>\n                    Also note that the editing functionality provided in this example is incomplete;\n                    changes are not persisted. To see a more complete example, see\n                    the <Link to=\"/editable\">Editable Data</Link> example.\n                </p>\n                <FixedSizeHolder>\n                    <div onKeyUp={this.onKeyUp} style={{ height: '100%' }}>\n                        <ReactCanvasGrid<string>\n                            columns={columns}\n                            data={data}\n                            rowHeight={20}\n                        />\n                    </div>\n                </FixedSizeHolder>\n                <EventLog log={this.state.eventLog} />\n            </PaddedPage>\n        );\n    }\n\n    private onKeyUp = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        this.setState({\n            eventLog: this.state.eventLog + `key up: ${event.key}\\n`,\n        });\n    }\n}\n","import * as React from 'react';\nimport { ReactCanvasGrid, SelectRange } from 'react-canvas-grid';\nimport { EventLog } from '../components/EventLog';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeDataAndColumns } from '../data/dataAndColumns';\n\ninterface SelectionEventsState {\n    eventLog: string;\n}\n\nconst { columns, rows: data } = createFakeDataAndColumns(100, 20, () => {/* no op */});\n\nexport class SelectionEventsGrid extends React.Component<{}, SelectionEventsState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            eventLog: '',\n        };\n    }\n\n    public render() {\n        return (\n            <PaddedPage>\n                <h1>Selection Events</h1>\n                <p>\n                    The three callbacks <code>onSelectionChange[Start|Update|End]</code> allow consumers\n                    of react-canvas-grid to take action in response to the user changing the selected area.\n                    This can be useful for keeping track of the selection, in order to act upon the data.\n                </p>\n                <p>\n                    Note that clicking / dragging on frozen headers allows the user to select entire rows / columns.\n                </p>\n                <FixedSizeHolder>\n                    <ReactCanvasGrid<void>\n                        columns={columns}\n                        data={data}\n                        rowHeight={20}\n                        frozenRows={1}\n                        frozenCols={1}\n                        onSelectionChangeStart={this.start}\n                        onSelectionChangeUpdate={this.update}\n                        onSelectionChangeEnd={this.end}\n                    />\n                </FixedSizeHolder>\n                <EventLog log={this.state.eventLog} />\n            </PaddedPage>\n        );\n    }\n\n    private start = (range: SelectRange | null) => {\n        this.appendToLog('start', range);\n    }\n\n    private update = (range: SelectRange | null) => {\n        this.appendToLog('update', range);\n    }\n\n    private end = (range: SelectRange | null) => {\n        this.appendToLog('end', range);\n    }\n\n    private appendToLog = (eventType: 'start' | 'update' | 'end', range: SelectRange | null) => {\n        const paddedType = eventType === 'start' ?  ' start' :\n                           eventType === 'update' ? 'update' :\n                                                    '   end';\n        const newRange = range ?\n            `(${range.topLeft.x},${range.topLeft.y}) -> (${range.bottomRight.x},${range.bottomRight.y})` :\n            'none';\n        this.setState({\n            eventLog: this.state.eventLog + `${paddedType}: ${newRange}\\n`,\n        });\n    }\n}\n","import * as React from 'react';\nimport { CustomBackgroundGrid } from './CustomBackground';\nimport { CustomTextGrid } from './CustomText';\nimport { DynamicDataGrid } from './DynamicData';\nimport { EditableDataGrid } from './Editable';\nimport { EditEventsGrid } from './EditEvents';\nimport { Everything } from './Everything';\nimport { FocusColumnGrid } from './FocusColumn';\nimport { FrozenCellsGrid } from './FrozenCells';\nimport { KeyboardEventsGrid } from './KeyboardEvents';\nimport { SelectionEventsGrid } from './SelectionEvents';\nimport { SimpleGrid } from './Simple';\nimport { SmallGrid } from './SmallGrid';\n\ninterface ExampleMeta {\n    pathFragment: string;\n    name: string;\n    description: React.ReactNode;\n    component: React.ComponentType<any>;\n}\n\nconst exampleMeta: ExampleMeta[] = [\n    {\n        pathFragment: '/full-example',\n        name: 'Full Example',\n        description: 'A kitchen-sink example, with as many features demonstrated at once as possible.',\n        component: Everything,\n    },\n    {\n        pathFragment: '/small',\n        name: 'Small Grid',\n        description: 'A basic grid setup with minimal data.',\n        component: SmallGrid,\n    },\n    {\n        pathFragment: '/simple',\n        name: 'Simple Grid',\n        description: 'A basic grid setup with enough data to need to scroll',\n        component: SimpleGrid,\n    },\n    {\n        pathFragment: '/editable',\n        name: 'Editable Data',\n        description: 'A grid with cells backed by data, made editable through a text box',\n        component: EditableDataGrid,\n    },\n    {\n        pathFragment: '/frozen',\n        name: 'Frozen Rows & Columns',\n        description: 'A grid with rows and columns that do not scroll',\n        component: FrozenCellsGrid,\n    },\n    {\n        pathFragment: '/focused-column',\n        name: 'Column Focusing',\n        description: 'Automatically scroll to a selected column',\n        component: FocusColumnGrid,\n    },\n    {\n        pathFragment: '/dynamic-data',\n        name: 'Dynamic Data',\n        description: 'Update the columns and rows provided to the grid component',\n        component: DynamicDataGrid,\n    },\n    {\n        pathFragment: '/custom-bg',\n        name: 'Custom Background Renderer',\n        description: 'Draw cells with custom backgrounds',\n        component: CustomBackgroundGrid,\n    },\n    {\n        pathFragment: '/custom-text',\n        name: 'Custom Text Renderer',\n        description: 'Draw cells with custom text',\n        component: CustomTextGrid,\n    },\n    {\n        pathFragment: '/selection-events',\n        name: 'Selection Events',\n        description: 'Respond to users changing the selected area',\n        component: SelectionEventsGrid,\n    },\n    {\n        pathFragment: '/keyboard-events',\n        name: 'Keyboard Events',\n        description: 'Respond to use of the keyboard when the grid is focused',\n        component: KeyboardEventsGrid,\n    },\n    {\n        pathFragment: '/edit-events',\n        name: 'Edit Events',\n        description: 'Respond to users changing the grid\\'s data',\n        component: EditEventsGrid,\n    },\n];\n\nexport default exampleMeta;\n","import * as React from 'react';\nimport { ReactCanvasGrid } from 'react-canvas-grid';\nimport PaddedPage from '../components/PaddedPage';\n\nexport const SmallGrid = () => {\n    return (\n        <PaddedPage>\n            <h1>Small Grid</h1>\n            <p>\n                This is a minimal usage of react-canvas-grid: a small, read-only grid of\n                static values.\n            </p>\n            <ReactCanvasGrid<void>\n                cssHeight={'45px'}\n                columns={[ { fieldName: 'field-one', width: 50 }, { fieldName: 'field-two', width: 50 } ]}\n                data={[{\n                    'field-one': { data: undefined, text: '1A' },\n                    'field-two': { data: undefined, text: '1B' },\n                },\n                {\n                    'field-one': { data: undefined, text: '2A' },\n                    'field-two': { data: undefined, text: '2B' },\n                }]}\n                rowHeight={20}\n            />\n        </PaddedPage>\n    );\n};\n","import * as React from 'react';\nimport { ReactCanvasGrid } from 'react-canvas-grid';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeDataAndColumns } from '../data/dataAndColumns';\n\nexport const SimpleGrid = () => {\n    const { columns, rows: data } = createFakeDataAndColumns(100, 20, () => {/* no op */});\n\n    return (\n        <PaddedPage>\n            <h1>Simple Grid</h1>\n            <p>\n                This is a basic usage of react-canvas-grid: a read-only grid of static values, held\n                within a <code>div</code> of fixed size.\n            </p>\n            <p>\n                Note that because the <code>cssHeight</code> and <code>cssWidth</code> props of&#160;\n                <code>ReactCanvasGrid</code> default to <code>100%</code>, the grid is constrained\n                to the size of its parent. Since the data in the grid requires a larger area than\n                that, the grid becomes scrollable.\n            </p>\n            <FixedSizeHolder>\n                <ReactCanvasGrid<void>\n                    columns={columns}\n                    data={data}\n                    rowHeight={20}\n                />\n            </FixedSizeHolder>\n        </PaddedPage>\n    );\n};\n","import * as React from 'react';\nimport { ReactCanvasGrid } from 'react-canvas-grid';\nimport { FixedSizeHolder } from '../components/FixedSizeHolder';\nimport PaddedPage from '../components/PaddedPage';\nimport { createFakeDataAndColumns } from '../data/dataAndColumns';\n\nexport const FrozenCellsGrid = () => {\n    const { columns, rows: data } = createFakeDataAndColumns(100, 20, () => {/* no op */});\n\n    return (\n        <PaddedPage>\n            <h1>Frozen Rows &amp; Columns</h1>\n            <p>\n                By setting the <code>frozenRows</code> and <code>frozenCols</code> props, rows\n                and columns of cells can be 'frozen' - i.e. fixed in place, even as the rest of\n                the grid scrolls.\n            </p>\n            <p>\n                This can be useful for creating column or row headers.\n            </p>\n            <FixedSizeHolder>\n                <ReactCanvasGrid<void>\n                    columns={columns}\n                    data={data}\n                    rowHeight={20}\n                    frozenRows={1}\n                    frozenCols={1}\n                />\n            </FixedSizeHolder>\n        </PaddedPage>\n    );\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport exampleMeta from './exampleMeta';\n\nexport const Index = () => {\n    return (\n        <React.Fragment>\n            <h1>Examples</h1>\n            <ul>\n                {exampleMeta.map((meta) => (\n                    <li key={meta.pathFragment}>\n                        <h3><Link to={meta.pathFragment}>{meta.name}</Link></h3>\n                        <p>{meta.description}</p>\n                    </li>\n                ))}\n            </ul>\n        </React.Fragment>\n    );\n};\n","import React, { Component } from 'react';\nimport { HashRouter, NavLink, Route } from 'react-router-dom';\nimport './App.css';\nimport exampleMeta from './examples/exampleMeta';\nimport { Index } from './examples/Index';\n\nclass App extends Component<{}, {}> {\n  public render() {\n    return (\n      <HashRouter>\n        <div className=\"app-container\">\n          <main>\n            <Route exact path=\"/\" component={Index} />\n            {exampleMeta.map((meta) => (\n              <Route key={meta.pathFragment} path={meta.pathFragment} component={meta.component} />\n            ))}\n          </main>\n          <nav>\n            <ul>\n              {exampleMeta.map((meta) => (\n                <li key={meta.pathFragment}>\n                  <NavLink to={meta.pathFragment} activeClassName=\"selected\">{meta.name}</NavLink>\n                </li>\n              ))}\n            </ul>\n          </nav>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}